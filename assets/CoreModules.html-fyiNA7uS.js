import{_ as s,c as a,b as e,o as t}from"./app-CIxGAYUx.js";const p={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="core-modules" tabindex="-1"><a class="header-anchor" href="#core-modules"><span>Core Modules</span></a></h1><h2 id="intergrid-communication-service" tabindex="-1"><a class="header-anchor" href="#intergrid-communication-service"><span>Intergrid Communication Service</span></a></h2><p>Sending messages between grids is a core capability of Mother, and this can be done in a variety of ways depending on your level of security.</p><h3 id="sending-open-broadcast" tabindex="-1"><a class="header-anchor" href="#sending-open-broadcast"><span>Sending Open Broadcast</span></a></h3><p>The most common case is sending an open broadcast to other grids. This is most appropriate for public channels. An open broadcast will be sent to all grids on the antenna network channel.</p><p>Let&#39;s look at how we <code>ping</code> other grids:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"><span class="token preprocessor property"># IntergridMessageService.cs</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Vector3D</span> currentPosition <span class="token operator">=</span> Mother<span class="token punctuation">.</span>Grid<span class="token punctuation">.</span><span class="token function">GetPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> requestBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> requestHeader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;OriginId&quot;</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Mother<span class="token punctuation">.</span>Id</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;OriginName&quot;</span><span class="token punctuation">,</span> Mother<span class="token punctuation">.</span>Grid<span class="token punctuation">.</span>CustomName <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;Path&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ping&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">currentPosition<span class="token punctuation">.</span>X</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">currentPosition<span class="token punctuation">.</span>Y</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;z&quot;</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">currentPosition<span class="token punctuation">.</span>Z</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Request</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">,</span> requestHeader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">SendOpenBroadcastRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> OnPingResponse<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>First we create the Request with the relevant payload - Body, and Header. Then we send it via open broadcast. Finally, we can set a callback to be run when a Response has been received to our message.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"></span>
<span class="line"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnPingResponse</span><span class="token punctuation">(</span><span class="token class-name">IntergridMessageObject</span> response<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Update Record in Almanac</span></span>
<span class="line">    <span class="token class-name">AlmanacRecord</span> almanacRecord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AlmanacRecord</span><span class="token punctuation">(</span></span>
<span class="line">        response<span class="token punctuation">.</span><span class="token function">BString</span><span class="token punctuation">(</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;grid&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3D</span><span class="token punctuation">(</span></span>
<span class="line">            response<span class="token punctuation">.</span><span class="token function">BDouble</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            response<span class="token punctuation">.</span><span class="token function">BDouble</span><span class="token punctuation">(</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            response<span class="token punctuation">.</span><span class="token function">BDouble</span><span class="token punctuation">(</span><span class="token string">&quot;z&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    almanacRecord<span class="token punctuation">.</span><span class="token function">AddNickname</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">HString</span><span class="token punctuation">(</span><span class="token string">&quot;OriginName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    Mother<span class="token punctuation">.</span>Almanac<span class="token punctuation">.</span><span class="token function">AddRecord</span><span class="token punctuation">(</span>almanacRecord<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sending-direct-message" tabindex="-1"><a class="header-anchor" href="#sending-direct-message"><span>Sending direct message</span></a></h3><p>If you would like to send a direct message to another grid, this can be done via unicast. This is used when sending a remote command to another grid:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"><span class="token preprocessor property"># IntergridMessageService.cs</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SendRequestFromRoutine</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> target<span class="token punctuation">,</span> <span class="token class-name">TerminalRoutine</span> routine<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// get target grid from Almanac</span></span>
<span class="line">    <span class="token class-name">Grid</span> grid <span class="token operator">=</span> Mother<span class="token punctuation">.</span>Almanac<span class="token punctuation">.</span><span class="token function">GetGridByIdentifier</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>grid <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token function">BuildCommandRequest</span><span class="token punctuation">(</span>routine<span class="token punctuation">.</span>UnpackedRoutineString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        request<span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">SendUnicastRequest</span><span class="token punctuation">(</span>grid<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sending-encrypted-messages" tabindex="-1"><a class="header-anchor" href="#sending-encrypted-messages"><span>Sending Encrypted Messages</span></a></h3><p>When playing in a PvP environment, it quickly becomes important to secure your communications so that other players cannot remotely command your grids running Mother. To do this, we can use Mother&#39;s built in encryption. Let&#39;s take a look at how we are using this during message transmission:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"><span class="token preprocessor property"># IntergridMessageService.cs</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SendUnicastRequest</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> TargetId<span class="token punctuation">,</span> <span class="token class-name">IntergridMessageObject</span> message<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>IntergridMessageObject<span class="token punctuation">&gt;</span></span> onResponse<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Register the message callback</span></span>
<span class="line">    activeRequests<span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message<span class="token punctuation">.</span>Header<span class="token punctuation">[</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">]</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> onResponse<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// encrypt the message if necessary</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> outgoingMessage <span class="token operator">=</span> <span class="token return-type class-name">Encryption <span class="token punctuation">?</span></span></span>
<span class="line">        Mother<span class="token punctuation">.</span>Security<span class="token punctuation">.</span><span class="token function">Encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span></span>
<span class="line">        message<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Send the message via unicast over the &quot;default&quot;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">bool</span></span> success <span class="token operator">=</span> Mother<span class="token punctuation">.</span>IGC<span class="token punctuation">.</span><span class="token function">SendUnicastMessage</span><span class="token punctuation">(</span>TargetId<span class="token punctuation">,</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span> outgoingMessage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Mother<span class="token punctuation">.</span>EventBus<span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RequestFailedEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Mother<span class="token punctuation">.</span>EventBus<span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RequestSentEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="using-channels" tabindex="-1"><a class="header-anchor" href="#using-channels"><span>Using Channels</span></a></h3><h3 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration"><span>Configuration</span></a></h3><p>Mother manages both the Programmable Block&#39;s Custom Data, as well as the Custom Data on each block allowing players to localize their configurations while continuing to make use of Mother other capbilities.</p><h4 id="accessing-mother-configuration" tabindex="-1"><a class="header-anchor" href="#accessing-mother-configuration"><span>Accessing Mother configuration</span></a></h4><p>Mother is primarily customized via the Custom Data field on the Programmable Block. For example, we can easily get a configuration value from it&#39;s <code>section</code> (general) and <code>key</code> (debug):</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"><span class="token class-name"><span class="token keyword">bool</span></span> IsDebugMode <span class="token operator">=</span> Mother<span class="token punctuation">.</span>Configuration<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;general.debug&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="accessing-block-configuration" tabindex="-1"><a class="header-anchor" href="#accessing-block-configuration"><span>Accessing Block configuration</span></a></h4><p>There are many instances where it is useful to access block-level configuration:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"></span>
<span class="line"><span class="token comment">// get block from Block Catalogue</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">void</span></span> MapScreen <span class="token operator">=</span> Mother<span class="token punctuation">.</span>BlockCatalogue</span>
<span class="line">    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetBlocks</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMyTextPanel<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>block <span class="token operator">=&gt;</span> block<span class="token punctuation">.</span>CustomName <span class="token operator">==</span> <span class="token string">&quot;Map Display&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// get the block&#39;s configuration</span></span>
<span class="line"><span class="token class-name">MyIni</span> blockConfig <span class="token operator">=</span> Mother<span class="token punctuation">.</span>BlockCatalogue<span class="token punctuation">.</span><span class="token function">GetBlockConfiguration</span><span class="token punctuation">(</span>MapScreen<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// get scale</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">string</span></span> scale <span class="token operator">=</span> blockConfig<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;general&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;scale&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="defining-hooks" tabindex="-1"><a class="header-anchor" href="#defining-hooks"><span>Defining Hooks</span></a></h4><p>Hooks allow an interface for developers to trigger actions when specific block actions occur via Mother.</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line"># Door.Custom Data</span>
<span class="line"></span>
<span class="line">[hooks]</span>
<span class="line">onOpen=wait 10; door/close this;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>You can target a hook on a block using the <code>RunHook</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"><span class="token preprocessor property"># DoorModule</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// get door</span></span>
<span class="line"><span class="token class-name">IMyDoor</span> door <span class="token operator">=</span> Mother<span class="token punctuation">.</span>BlockCatalogue</span>
<span class="line">    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetBlocks</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMyDoor<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// run hook for door (block)</span></span>
<span class="line">Mother<span class="token punctuation">.</span>BlockCatalogue<span class="token punctuation">.</span><span class="token function">RunHook</span><span class="token punctuation">(</span>door<span class="token punctuation">,</span> <span class="token string">&quot;onOpen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="almanac" tabindex="-1"><a class="header-anchor" href="#almanac"><span>Almanac</span></a></h2><ol><li>Creating a new record</li><li>Updating a record</li><li>IFF</li><li>Ping</li></ol><h2 id="block-catalogue" tabindex="-1"><a class="header-anchor" href="#block-catalogue"><span>Block Catalogue</span></a></h2><ol><li>Register a Block with Block Catalogue</li><li>Getting a block from the block catalogue</li></ol><h2 id="local-storage" tabindex="-1"><a class="header-anchor" href="#local-storage"><span>Local Storage</span></a></h2><h2 id="command-bus" tabindex="-1"><a class="header-anchor" href="#command-bus"><span>Command Bus</span></a></h2><ol><li>Create a custom command</li><li>Register the command within a module</li></ol><h2 id="event-bus" tabindex="-1"><a class="header-anchor" href="#event-bus"><span>Event Bus</span></a></h2><ol><li>Creating an Event</li><li>Firing An Event</li><li>Subscribing to an event</li></ol><h2 id="flight-planner" tabindex="-1"><a class="header-anchor" href="#flight-planner"><span>Flight Planner</span></a></h2>`,39)]))}const l=s(p,[["render",o],["__file","CoreModules.html.vue"]]),u=JSON.parse('{"path":"/Framework/Developer/CoreModules/CoreModules.html","title":"Core Modules","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Intergrid Communication Service","slug":"intergrid-communication-service","link":"#intergrid-communication-service","children":[{"level":3,"title":"Sending Open Broadcast","slug":"sending-open-broadcast","link":"#sending-open-broadcast","children":[]},{"level":3,"title":"Sending direct message","slug":"sending-direct-message","link":"#sending-direct-message","children":[]},{"level":3,"title":"Sending Encrypted Messages","slug":"sending-encrypted-messages","link":"#sending-encrypted-messages","children":[]},{"level":3,"title":"Using Channels","slug":"using-channels","link":"#using-channels","children":[]},{"level":3,"title":"Configuration","slug":"configuration","link":"#configuration","children":[]}]},{"level":2,"title":"Almanac","slug":"almanac","link":"#almanac","children":[]},{"level":2,"title":"Block Catalogue","slug":"block-catalogue","link":"#block-catalogue","children":[]},{"level":2,"title":"Local Storage","slug":"local-storage","link":"#local-storage","children":[]},{"level":2,"title":"Command Bus","slug":"command-bus","link":"#command-bus","children":[]},{"level":2,"title":"Event Bus","slug":"event-bus","link":"#event-bus","children":[]},{"level":2,"title":"Flight Planner","slug":"flight-planner","link":"#flight-planner","children":[]}],"git":{"updatedTime":1742593967000,"contributors":[{"name":"Luke Morrison","username":"","email":"lukejamesmorrison@gmail.com","commits":2}],"changelog":[{"hash":"ef0206845170759b186ba757dc6a404bbb00a74b","time":1742593967000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"Update docs"},{"hash":"7c2fb0716f1b3a7b9765a5e6872cb915206257b5","time":1742428082000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"Initial commit"}]},"filePathRelative":"Framework/Developer/CoreModules/CoreModules.md"}');export{l as comp,u as data};
