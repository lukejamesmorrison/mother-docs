import{_ as l,c as p,a as e,d as c,e as s,b as a,w as t,f as r,g as u}from"./app-BgP5_kDJ.js";const d={},m={class:"table-of-contents"},g={class:"hint-container tip"};function h(k,n){const i=r("RouteLink"),o=r("router-link");return u(),p("div",null,[n[25]||(n[25]=e("h1",{id:"managing-script-size-complexity",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#managing-script-size-complexity"},[e("span",null,"Managing Script Size & Complexity")])],-1)),e("p",null,[n[1]||(n[1]=s("Size matters. Your script has a hard limit of ",-1)),n[2]||(n[2]=e("code",null,"100,000 characters",-1)),n[3]||(n[3]=s(" after minification. Malware whipped together an awesome tool for this, but nonetheless, keywords and language features are not minified and come at a cost. Second, never loop within a loop. Never. On a grid of any meaningful size, this could cause your script to crash. Mother Core uses a combination of techniques to operate regardless of grid size via the ",-1)),a(i,{to:"/Framework/Developer/CoreModules/BlockCatalogue.html"},{default:t(()=>[...n[0]||(n[0]=[s("Block Catalogue",-1)])]),_:1}),n[4]||(n[4]=s(".",-1))]),e("nav",m,[e("ul",null,[e("li",null,[a(o,{to:"#tips-for-managing-size"},{default:t(()=>[...n[5]||(n[5]=[s("Tips for Managing Size",-1)])]),_:1}),e("ul",null,[e("li",null,[a(o,{to:"#avoiding-multiple-block-type-references"},{default:t(()=>[...n[6]||(n[6]=[s("Avoiding Multiple Block Type References",-1)])]),_:1})]),e("li",null,[a(o,{to:"#being-conscious-of-keywords"},{default:t(()=>[...n[7]||(n[7]=[s("Being Conscious of Keywords",-1)])]),_:1})]),e("li",null,[a(o,{to:"#reducing-string-size"},{default:t(()=>[...n[8]||(n[8]=[s("Reducing String Size",-1)])]),_:1})])])]),e("li",null,[a(o,{to:"#tips-for-managing-complexity"},{default:t(()=>[...n[9]||(n[9]=[s("Tips for Managing Complexity",-1)])]),_:1})])])]),n[26]||(n[26]=e("h2",{id:"tips-for-managing-size",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#tips-for-managing-size"},[e("span",null,"Tips for Managing Size")])],-1)),n[27]||(n[27]=e("p",null,"You may need to compromise between what is the most safe/efficent, and what is least expensive in terms of character count.",-1)),n[28]||(n[28]=e("h3",{id:"avoiding-multiple-block-type-references",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#avoiding-multiple-block-type-references"},[e("span",null,"Avoiding Multiple Block Type References")])],-1)),e("p",null,[n[11]||(n[11]=s("Throughout developing ",-1)),a(i,{to:"/IngameScript/IngameScript.html"},{default:t(()=>[...n[10]||(n[10]=[s("Mother OS",-1)])]),_:1}),n[12]||(n[12]=s(", the largest character cost comes from accessing blocks by their type. Since these are whitelisted by the API, they cannot be minified and so come at great cost each time you reference them. For example, referencing a connector with ",-1)),n[13]||(n[13]=e("code",null,"IMyShipConnector",-1)),n[14]||(n[14]=s(" costs ",-1)),n[15]||(n[15]=e("strong",null,"16 characters",-1)),n[16]||(n[16]=s(".",-1))]),n[29]||(n[29]=c(`<p><strong>Some notable block types:</strong></p><table><thead><tr><th>Name</th><th style="text-align:center;">Character Count</th></tr></thead><tbody><tr><td><a href="https://github.com/malware-dev/MDK-SE/wiki/Sandbox.ModAPI.Ingame.IMyMechanicalConnectionBlock" target="_blank" rel="noopener noreferrer"><code>IMyMechanicalConnectionBlock</code></a></td><td style="text-align:center;">28</td></tr><tr><td><a href="https://github.com/malware-dev/MDK-SE/wiki/Sandbox.ModAPI.Ingame.IMyBroadcastControllerBlock" target="_blank" rel="noopener noreferrer"><code>IMyBroadcastControllerBlock</code></a></td><td style="text-align:center;">27</td></tr><tr><td><a href="https://github.com/malware-dev/MDK-SE/wiki/Sandbox.ModAPI.Ingame.IMyProgrammableBlock" target="_blank" rel="noopener noreferrer"><code>IMyProgrammableBlock</code></a></td><td style="text-align:center;">20</td></tr><tr><td><a href="https://github.com/malware-dev/MDK-SE/wiki/Sandbox.ModAPI.Ingame.IMyShipConnector" target="_blank" rel="noopener noreferrer"><code>IMyShipConnector</code></a></td><td style="text-align:center;">16</td></tr></tbody></table><p>Check out Malware&#39;s <a href="https://github.com/malware-dev/MDK-SE/wiki/Api-index" target="_blank" rel="noopener noreferrer">API Index</a> for the entire list of available types.</p><h4 id="examples" tabindex="-1"><a class="header-anchor" href="#examples"><span>Examples</span></a></h4><p>Let&#39;s look at the common action of looping through a list of connectors:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">List<span class="token punctuation">&lt;</span>IMyShipConnector<span class="token punctuation">&gt;</span></span> Connectors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>IMyShipConnector<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name">IMyShipConnector</span> connector <span class="token keyword">in</span> Connectors<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    connector<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We&#39;ve used <code>IMyShipConnector</code> 3 times and so will require at least 46 characters to complete this action. When you&#39;re doing some complex work, this only gets worse. Let&#39;s save some space with <code>var</code>:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">List<span class="token punctuation">&lt;</span>IMyShipConnector<span class="token punctuation">&gt;</span></span> Connectors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>IMyShipConnector<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">var</span></span> connector <span class="token keyword">in</span> Connectors<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    connector<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Not bad, we&#39;ve saved <strong>13 characters</strong> already! Since this is a simple action though, let&#39;s go even further:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">List<span class="token punctuation">&lt;</span>IMyShipConnector<span class="token punctuation">&gt;</span></span> Connectors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">List<span class="token punctuation">&lt;</span>IMyShipConnector<span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">Connectors<span class="token punctuation">.</span><span class="token function">ForEach</span><span class="token punctuation">(</span>connector <span class="token operator">=&gt;</span> connector<span class="token punctuation">.</span><span class="token function">Connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Boom - we no longer need any keywords within our loop and can save the brackets by putting the logic on a single line.</p><h3 id="being-conscious-of-keywords" tabindex="-1"><a class="header-anchor" href="#being-conscious-of-keywords"><span>Being Conscious of Keywords</span></a></h3><p>It is great practice to use keywords (<code>private</code>, <code>readonly</code>, etc.) as you are developing. However, keywords come at a cost as they are not minifiable, and so take up space each time you use them. Many of these are removed during the build process as this makes no difference to the computer once running in the programmable block.</p><p>Nonetheless, always be consicous of language level keywords and punctuation. 100,000 characters adds up fast.</p><p>For example, the programmable block will treat these two lines of code exactly the same.</p><p><strong>Full keywords:</strong></p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name"><span class="token keyword">string</span></span> SystemName <span class="token operator">=</span> <span class="token string">&quot;Mother OS&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Partial keywords:</strong></p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">string</span></span> SystemName <span class="token operator">=</span> <span class="token string">&quot;Mother OS&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>It is good practive to <strong>ALWAYS</strong> use keywords. These exist for a reason and help keep our code clean and expressive. I suggest only reaching for these types of optimizations when all other cleanup has been exhausted.</p></div><h3 id="reducing-string-size" tabindex="-1"><a class="header-anchor" href="#reducing-string-size"><span>Reducing String Size</span></a></h3><p>There are generally two ways to print a string value in C#. You can do this via the <code>ToString()</code> method on most objects, or via string interpolation where the string value of the provided object can be inferred. Let&#39;s look at each option.</p><h4 id="tostring-method" tabindex="-1"><a class="header-anchor" href="#tostring-method"><span><code>ToString()</code> method:</span></a></h4><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">float</span></span> velocity <span class="token operator">=</span> <span class="token number">123.45f</span></span>
<span class="line"></span>
<span class="line">Mother<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>velocity<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When minified, the string segment is <strong>12 characters</strong> long:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">Ò<span class="token punctuation">.</span><span class="token function">ToString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="string-interpolation" tabindex="-1"><a class="header-anchor" href="#string-interpolation"><span>String interpolation:</span></a></h4><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">float</span></span> velocity <span class="token operator">=</span> <span class="token number">123.45f</span></span>
<span class="line"></span>
<span class="line">Mother<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">velocity</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>When minified, the string segment is <strong>6 characters</strong> long:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Ò</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Truthfully, I prefer the first method in most cases, but it comes at a higher cost. In the above example, using string interprolation results in a 50% reduction in characters - which is HUGE when you are printing a lot of data for the player.</p><h2 id="tips-for-managing-complexity" tabindex="-1"><a class="header-anchor" href="#tips-for-managing-complexity"><span>Tips for Managing Complexity</span></a></h2><p>If your script tries to conduct more than 50,000 operations in a single cycle, then you will hit a <code>script too complex</code> error. This is almost always caused by the overuse of loops. You should do your best to use HashSets and Dictionaries rather than nested loops to control your logic. Check out <a href="https://en.wikipedia.org/wiki/Breadth-first_search" target="_blank" rel="noopener noreferrer">Breadth-first Searching (BFS)</a> and <a href="https://en.wikipedia.org/wiki/Time_complexity" target="_blank" rel="noopener noreferrer">Time Complexity</a> to get a better understand of this important computer science concept.</p>`,33)),e("div",g,[n[24]||(n[24]=e("p",{class:"hint-container-title"},"Tips",-1)),e("p",null,[n[19]||(n[19]=s("The ",-1)),a(i,{to:"/Framework/Developer/CoreModules/BlockCatalogue.html"},{default:t(()=>[...n[17]||(n[17]=[s("Block Catalogue",-1)])]),_:1}),n[20]||(n[20]=s(" uses BFS to determine which blocks are on the current ",-1)),n[21]||(n[21]=e("strong",null,"construct",-1)),n[22]||(n[22]=s(", as often a subgrid will have subgrids, which will have subgrids... you get the point. For those that have been using ",-1)),a(i,{to:"/IngameScript/IngameScript.html"},{default:t(()=>[...n[18]||(n[18]=[s("Mother OS",-1)])]),_:1}),n[23]||(n[23]=s(" for a while, this is likely the area that was causing you complexity errors before July 2025.",-1))])])])}const f=l(d,[["render",h]]),b=JSON.parse('{"path":"/Framework/Developer/GettingStarted/ManagingScriptSize.html","title":"Managing Script Size & Complexity","lang":"en-US","frontmatter":{"prev":"/Framework/Developer/GettingStarted/ArchitectureOverview.md","next":"/Framework/Developer/BuildingAModule/BuildingAModule.md"},"git":{"updatedTime":1759090324000,"contributors":[{"name":"Luke Morrison","username":"","email":"lukejamesmorrison@gmail.com","commits":6},{"name":"lukejamesmorrison","username":"lukejamesmorrison","email":"30843159+lukejamesmorrison@users.noreply.github.com","commits":2,"url":"https://github.com/lukejamesmorrison"}],"changelog":[{"hash":"a35e75652ef0f8a839721db64be2b1b0cf8d63e7","time":1759090324000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"1.0 Final"},{"hash":"a882bf3a253914d5c48f6f125da4f7c6a227b459","time":1755397526000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"Update framework footer navigation pathway"},{"hash":"90ef559149c4e90132aa0f257d78148f56b9dfa6","time":1755006332000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"Updates to soyuz animation &#x26; svg"},{"hash":"effd9d96219e3b940efebaae7ff63d6eda576759","time":1754690910000,"email":"30843159+lukejamesmorrison@users.noreply.github.com","author":"Luke","message":"Major update to Core pages"},{"hash":"45c719ddd7d0ab590376c4296af561cba3f201d2","time":1754520614000,"email":"30843159+lukejamesmorrison@users.noreply.github.com","author":"Luke","message":"Improve Core documentation and update animations on home page"},{"hash":"9fdbfc2d95d5a85f876d6496e1e2d1fb3196d285","time":1751221127000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"Framework updates"},{"hash":"15ee173564b47688d911d239bf1296182577deca","time":1744933175000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"Update docs"},{"hash":"d4c81fc8211f49ec3f9c79e45ca84998be0dbdb3","time":1744758881000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"Add more module pages"}]},"filePathRelative":"Framework/Developer/GettingStarted/ManagingScriptSize.md"}');export{f as comp,b as data};
