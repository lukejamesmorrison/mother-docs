import{_ as o,c as i,a,d as c,e as n,b as t,w as p,f as l,g as r}from"./app-Du6kk5HX.js";const d={},u={class:"table-of-contents"};function m(g,s){const e=l("router-link");return r(),i("div",null,[s[2]||(s[2]=a("h1",{id:"security",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#security"},[a("span",null,"Security")])],-1)),s[3]||(s[3]=a("p",null,[n("This utility can assist with encrypting and decrypting data using a provided "),a("code",null,"passcode"),n(". For example, this is used heavily during intergrid communication to ensure communications are secured over channels using passcodes.")],-1)),a("nav",u,[a("ul",null,[a("li",null,[t(e,{to:"#encypting-data"},{default:p(()=>s[0]||(s[0]=[n("Encypting Data",-1)])),_:1,__:[0]})]),a("li",null,[t(e,{to:"#decypting-data"},{default:p(()=>s[1]||(s[1]=[n("Decypting Data",-1)])),_:1,__:[1]})])])]),s[4]||(s[4]=c(`<h2 id="encypting-data" tabindex="-1"><a class="header-anchor" href="#encypting-data"><span>Encypting Data</span></a></h2><p>To encrypt data, we use the <code>Encrypt()</code> method. It expects a string to be encypted, with the desired passcode to be used for encyption.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">string</span></span> message <span class="token operator">=</span> <span class="token string">&quot;The Empire must grow&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">string</span></span> passcode <span class="token operator">=</span> <span class="token string">&quot;Z1ON0101&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">string</span></span> encyptedMessage <span class="token operator">=</span> Security<span class="token punctuation">.</span><span class="token function">Encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> passcode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// =&gt; &quot;##asjjgahas4$@fasjasd#...&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="decypting-data" tabindex="-1"><a class="header-anchor" href="#decypting-data"><span>Decypting Data</span></a></h2><p>To decrypt data, we can use the <code>Decrypt()</code> method with a passcode:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name"><span class="token keyword">string</span></span> enryptedMessage <span class="token operator">=</span> <span class="token string">&quot;##asjjgahas4$@fasjasd#...&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">string</span></span> passcode <span class="token operator">=</span> <span class="token string">&quot;Z1ON0101&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name"><span class="token keyword">string</span></span> decryptedMessage <span class="token operator">=</span> Security<span class="token punctuation">.</span><span class="token function">Decrypt</span><span class="token punctuation">(</span>enryptedMessage<span class="token punctuation">,</span> passcode<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// =&gt; &quot;The Empire must grow&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6))])}const h=o(d,[["render",m]]),y=JSON.parse('{"path":"/Framework/Developer/Utilities/Security.html","title":"Security","lang":"en-US","frontmatter":{},"git":{"updatedTime":1754690910000,"contributors":[{"name":"lukejamesmorrison","username":"lukejamesmorrison","email":"30843159+lukejamesmorrison@users.noreply.github.com","commits":1,"url":"https://github.com/lukejamesmorrison"}],"changelog":[{"hash":"effd9d96219e3b940efebaae7ff63d6eda576759","time":1754690910000,"email":"30843159+lukejamesmorrison@users.noreply.github.com","author":"Luke","message":"Major update to Core pages"}]},"filePathRelative":"Framework/Developer/Utilities/Security.md"}');export{h as comp,y as data};
