import{_ as i,c as t,a as n,b as o,e as a,d as l,w as r,r as p,o as c}from"./app-BAyOkzRw.js";const d={};function u(k,s){const e=p("RouteLink");return c(),t("div",null,[s[3]||(s[3]=n("h1",{id:"serializer",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#serializer"},[n("span",null,"Serializer")])],-1)),n("p",null,[s[1]||(s[1]=a("On several occasions, it is most practical to convert our objects into strings. This is necessary when commiting data to ")),l(e,{to:"/Framework/Developer/CoreModules/LocalStorage.html"},{default:r(()=>s[0]||(s[0]=[a("Local Storage")])),_:1}),s[2]||(s[2]=a(" or when communicating with another grid via the Intergrid Messaging Service."))]),s[4]||(s[4]=o(`<p>The <code>Serializer</code> utility class provides a set of static methods to serialize and deserialize objects.</p><h2 id="serialize-an-object" tabindex="-1"><a class="header-anchor" href="#serialize-an-object"><span>Serialize an Object</span></a></h2><p>When sending a message to another grid, we need to convert our message into a string. This is done by calling the <code>Serializer.SerializeDictionary()</code> method to serialize or message <code>header</code> and <code>body</code>.</p><div class="code-block-title"><div class="code-block-title-bar"><span class="title" data-title="IntergridMessagingObject.cs">IntergridMessagingObject.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Create a dictionary to store the message</span></span>
<span class="line">    <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> body<span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> header<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> headerSerialized <span class="token operator">=</span> Serializer<span class="token punctuation">.</span><span class="token function">SerializeDictionary</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> bodySerialized <span class="token operator">=</span> Serializer<span class="token punctuation">.</span><span class="token function">SerializeDictionary</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Serialize the dictionary</span></span>
<span class="line">    <span class="token keyword">return</span>  <span class="token interpolation-string"><span class="token string">$&quot;&lt;header&gt;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">headerSerialized</span><span class="token punctuation">}</span></span><span class="token string">&lt;/header&gt;&quot;</span></span> <span class="token operator">+</span></span>
<span class="line">            <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">bodySerialized</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>See the <a href="">Intergrid Messaging Service</a> for more information on how to send messages to other grids.</p><h2 id="deserialize-an-object" tabindex="-1"><a class="header-anchor" href="#deserialize-an-object"><span>Deserialize an Object</span></a></h2>`,6))])}const g=i(d,[["render",u],["__file","Serializer.html.vue"]]),b=JSON.parse('{"path":"/Framework/Developer/Utilities/Serializer.html","title":"Serializer","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Serialize an Object","slug":"serialize-an-object","link":"#serialize-an-object","children":[]},{"level":2,"title":"Deserialize an Object","slug":"deserialize-an-object","link":"#deserialize-an-object","children":[]}],"git":{"updatedTime":1742428082000,"contributors":[{"name":"Luke Morrison","username":"","email":"lukejamesmorrison@gmail.com","commits":1}],"changelog":[{"hash":"7c2fb0716f1b3a7b9765a5e6872cb915206257b5","time":1742428082000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"Initial commit"}]},"filePathRelative":"Framework/Developer/Utilities/Serializer.md"}');export{g as comp,b as data};
