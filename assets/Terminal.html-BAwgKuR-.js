import{_ as l,c as p,a as s,d as o,b as e,w as t,f as c,g as r,e as i}from"./app-85OlVtp3.js";const u={},d={class:"table-of-contents"};function m(k,n){const a=c("router-link");return r(),p("div",null,[n[3]||(n[3]=s("h1",{id:"terminal",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#terminal"},[s("span",null,"Terminal")])],-1)),s("nav",d,[s("ul",null,[s("li",null,[e(a,{to:"#printing-to-the-terminal"},{default:t(()=>n[0]||(n[0]=[i("Printing to the Terminal",-1)])),_:1,__:[0]})]),s("li",null,[e(a,{to:"#highlighting-a-value"},{default:t(()=>n[1]||(n[1]=[i("Highlighting a Value",-1)])),_:1,__:[1]})]),s("li",null,[e(a,{to:"#clearing-the-terminal"},{default:t(()=>n[2]||(n[2]=[i("Clearing the Terminal",-1)])),_:1,__:[2]})])])]),n[4]||(n[4]=o(`<p>The terminal module manages the terminal interface for the programmable block.</p><h2 id="printing-to-the-terminal" tabindex="-1"><a class="header-anchor" href="#printing-to-the-terminal"><span>Printing to the Terminal</span></a></h2><p>Once Mother has booted, you can use the <code>Print()</code> method to print values to the terminal stack. This is useful for debugging or displaying information to the user.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MissileGuidanceModule.cs"><span>MissileGuidanceModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Terminal</span> terminal <span class="token operator">=</span> Mother<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetModule</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Terminal<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Print a value to the terminal</span></span>
<span class="line">    terminal<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Launching missile...&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// or simply use to method on Mother</span></span>
<span class="line">    Mother<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;Launching missile...&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In situations where we have a lot of text to print, we can use an optional second parameter to disable trimming.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MissileGuidanceModule.cs"><span>MissileGuidanceModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">MissileState</span> currentState <span class="token operator">=</span> MissileState<span class="token punctuation">.</span>Idle<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Launch</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Print a long message without trimming</span></span>
<span class="line">    Mother<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token interpolation-string"><span class="token string">$&quot;Missile launching in 10 seconds.\\nCurrent state: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">currentState</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> </span>
<span class="line">        <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="highlighting-a-value" tabindex="-1"><a class="header-anchor" href="#highlighting-a-value"><span>Highlighting a Value</span></a></h2><p>Sometimes it is convenient to always show a value of the terminal screen rather than have it disappear within the call stack. You can use the <code>Highlight()</code> method to <strong>pin</strong> a printout to the top of the terminal window.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MissileGuidanceModule.cs"><span>MissileGuidanceModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">MissileState</span> currentState <span class="token operator">=</span> MissileState<span class="token punctuation">.</span>Idle<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Terminal</span> terminal <span class="token operator">=</span> Mother<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetModule</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Terminal<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// Highlight a value continuously</span></span>
<span class="line">    terminal<span class="token punctuation">.</span><span class="token function">Highlight</span><span class="token punctuation">(</span><span class="token interpolation-string"><span class="token string">$&quot;State: </span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">currentState</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="clearing-the-terminal" tabindex="-1"><a class="header-anchor" href="#clearing-the-terminal"><span>Clearing the Terminal</span></a></h2><p>If you want to clear the terminal stack, you can use the <code>Clear()</code> method. This will remove all printed values from the terminal.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">Mother<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetModule</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>Terminal<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,12))])}const v=l(u,[["render",m]]),g=JSON.parse('{"path":"/Framework/Developer/CoreModules/Terminal.html","title":"Terminal","lang":"en-US","frontmatter":{},"git":{"updatedTime":1754690910000,"contributors":[{"name":"lukejamesmorrison","username":"lukejamesmorrison","email":"30843159+lukejamesmorrison@users.noreply.github.com","commits":2,"url":"https://github.com/lukejamesmorrison"}],"changelog":[{"hash":"effd9d96219e3b940efebaae7ff63d6eda576759","time":1754690910000,"email":"30843159+lukejamesmorrison@users.noreply.github.com","author":"Luke","message":"Major update to Core pages"},{"hash":"656cfacdf436e6faca234cf77b83f77ed2c9c8d2","time":1751234971000,"email":"30843159+lukejamesmorrison@users.noreply.github.com","author":"Luke","message":"Finish first draft of framework documentation"}]},"filePathRelative":"Framework/Developer/CoreModules/Terminal.md"}');export{v as comp,g as data};
