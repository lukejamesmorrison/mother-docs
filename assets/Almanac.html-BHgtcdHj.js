import{_ as i,c as r,a as n,b as c,d as e,w as t,e as a,r as p,o as d}from"./app-Lo-NbY0f.js";const u={},m={class:"table-of-contents"};function k(v,s){const o=p("router-link"),l=p("RouteLink");return d(),r("div",null,[s[16]||(s[16]=n("h1",{id:"almanac",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#almanac"},[n("span",null,"Almanac")])],-1)),n("nav",m,[n("ul",null,[n("li",null,[e(o,{to:"#records"},{default:t(()=>s[0]||(s[0]=[a("Records")])),_:1}),n("ul",null,[n("li",null,[e(o,{to:"#creating-a-record"},{default:t(()=>s[1]||(s[1]=[a("Creating a Record")])),_:1})]),n("li",null,[e(o,{to:"#removing-a-record"},{default:t(()=>s[2]||(s[2]=[a("Removing a Record")])),_:1})])])]),n("li",null,[e(o,{to:"#storage-records-across-recompiles"},{default:t(()=>s[3]||(s[3]=[a("Storage Records across Recompiles")])),_:1})])])]),s[17]||(s[17]=c(`<p>The Almanac manages a list of records that represent entities in the game world. These records can be used to track the location of entities, communicate with them, and display them on map displays. Since each instance of Mother is unique to its Programmable Block, we use the block&#39;s <code>EntityId</code> as the unique identifier.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"><span class="token comment">// via the Program instance</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">long</span></span> myId <span class="token operator">=</span> Program<span class="token punctuation">.</span>Me<span class="token punctuation">.</span>EntityId<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// or via Mother (recommended)</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">long</span></span> myId <span class="token operator">=</span> Mother<span class="token punctuation">.</span>Id<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>The almanac currently supports the following Entity types:</p><ul><li><code>Grid</code></li><li><code>Waypoint</code></li></ul><h2 id="records" tabindex="-1"><a class="header-anchor" href="#records"><span>Records</span></a></h2><div class="code-block-title"><div class="code-block-title-bar"><span class="title" data-title="DockingModule.cs">DockingModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"><span class="token comment">// Get a record by name</span></span>
<span class="line">AlmanacRecord <span class="token keyword">record</span> <span class="token operator">=</span> Almanac<span class="token punctuation">.</span><span class="token function">GetRecord</span><span class="token punctuation">(</span><span class="token string">&quot;Mothership&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"></span>
<span class="line"><span class="token comment">// Get a record by ID (the EntityId of the programmable block)</span></span>
<span class="line">AlmanacRecord <span class="token keyword">record</span> <span class="token operator">=</span> Almanac<span class="token punctuation">.</span><span class="token function">GetRecord</span><span class="token punctuation">(</span><span class="token number">12345678901234567890</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="creating-a-record" tabindex="-1"><a class="header-anchor" href="#creating-a-record"><span>Creating a Record</span></a></h3><div class="code-block-title"><div class="code-block-title-bar"><span class="title" data-title="DockingModule.cs">DockingModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"><span class="token comment">// Create record</span></span>
<span class="line">TopSecretBase <span class="token keyword">record</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AlmanacRecord</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token string">&quot;TopSecretBase&quot;</span><span class="token punctuation">,</span>                            <span class="token comment">// name</span></span>
<span class="line">    <span class="token string">&quot;Grid&quot;</span><span class="token punctuation">,</span>                                     <span class="token comment">// entity type</span></span>
<span class="line">    <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3D</span><span class="token punctuation">(</span><span class="token number">1234.23</span><span class="token punctuation">,</span> <span class="token number">5678.72</span><span class="token punctuation">,</span> <span class="token number">24155.22</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment">// position</span></span>
<span class="line">    <span class="token number">0</span>                                           <span class="token comment">// speed (optional)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Add to the almanac</span></span>
<span class="line">Mother<span class="token punctuation">.</span>Almanac<span class="token punctuation">.</span><span class="token function">AddRecord</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>When records are added to the Almanac, they will automatically appear on map displays and be accessible for remote communication. Mother add and updates records frequently via a <code>Ping</code>.</p><h3 id="removing-a-record" tabindex="-1"><a class="header-anchor" href="#removing-a-record"><span>Removing a Record</span></a></h3><p>To remove a record, you can simply access the <code>Records</code> list and remove the record you want to delete.</p><div class="code-block-title"><div class="code-block-title-bar"><span class="title" data-title="DockingModule.cs">DockingModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"><span class="token comment">// Get the record</span></span>
<span class="line">AlmanacRecord <span class="token keyword">record</span> <span class="token operator">=</span> Almanac<span class="token punctuation">.</span><span class="token function">GetRecord</span><span class="token punctuation">(</span><span class="token string">&quot;Mothership&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Remove the record from the almanac</span></span>
<span class="line">Mother<span class="token punctuation">.</span>Almanac<span class="token punctuation">.</span>Records<span class="token punctuation">.</span><span class="token function">Remove</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="storage-records-across-recompiles" tabindex="-1"><a class="header-anchor" href="#storage-records-across-recompiles"><span>Storage Records across Recompiles</span></a></h2><p>When a programmable block recompiles, scripts are reloaded and all state lost by default. To prevent this, the Almanac stores records in <a href="">Local Storage</a> to make it accessible after recompile, error or a game reboot.</p><div class="code-block-title"><div class="code-block-title-bar"><span class="title" data-title="Almanac.cs">Almanac.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// convert List to Dict and use ID as key</span></span>
<span class="line">    <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> recordDict <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token keyword">var</span> <span class="token keyword">record</span> <span class="token class-name"><span class="token keyword">in</span></span> Records<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        recordDict<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">record</span><span class="token punctuation">.</span>Id<span class="token punctuation">,</span> <span class="token keyword">record</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// serialize into a string</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> serializedAlmanac <span class="token operator">=</span> Serializer<span class="token punctuation">.</span><span class="token function">SerializeDictionary</span><span class="token punctuation">(</span>recordDict<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// save the string to the storage</span></span>
<span class="line">    Mother<span class="token punctuation">.</span>LocalStorage<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">&quot;almanac&quot;</span><span class="token punctuation">,</span> serializedAlmanac<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,15)),n("p",null,[s[5]||(s[5]=a("We use the ")),e(l,{to:"/Framework/Developer/Utilities/Serializer.html"},{default:t(()=>s[4]||(s[4]=[a("Serializer")])),_:1}),s[6]||(s[6]=a(" utility class to convert our records in strings for use with the ")),s[7]||(s[7]=n("code",null,"Program.Save()",-1)),s[8]||(s[8]=a(" method."))]),n("p",null,[s[10]||(s[10]=a("To retreive the Almanac from storage on the next cycle, we use the ")),s[11]||(s[11]=n("code",null,"LoadFromLocalStorage()",-1)),s[12]||(s[12]=a(" method which will retreive the ")),s[13]||(s[13]=n("code",null,"almanac",-1)),s[14]||(s[14]=a(" item from ")),e(l,{to:"/Framework/Developer/CoreModules/LocalStorage.html"},{default:t(()=>s[9]||(s[9]=[a("Local Storage")])),_:1}),s[15]||(s[15]=a(" and automatically populate the Almanac with the records."))]),s[18]||(s[18]=c(`<div class="code-block-title"><div class="code-block-title-bar"><span class="title" data-title="Mother.cs">Mother.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    Almanac<span class="token punctuation">.</span><span class="token function">LoadFromLocalStorage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Other boot tasks...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,1))])}const g=i(u,[["render",k],["__file","Almanac.html.vue"]]),h=JSON.parse('{"path":"/Framework/Developer/CoreModules/Almanac.html","title":"Almanac","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Records","slug":"records","link":"#records","children":[{"level":3,"title":"Creating a Record","slug":"creating-a-record","link":"#creating-a-record","children":[]},{"level":3,"title":"Removing a Record","slug":"removing-a-record","link":"#removing-a-record","children":[]}]},{"level":2,"title":"Storage Records across Recompiles","slug":"storage-records-across-recompiles","link":"#storage-records-across-recompiles","children":[]}],"git":{"updatedTime":1742428082000,"contributors":[{"name":"Luke Morrison","username":"","email":"lukejamesmorrison@gmail.com","commits":1}],"changelog":[{"hash":"7c2fb0716f1b3a7b9765a5e6872cb915206257b5","time":1742428082000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"Initial commit"}]},"filePathRelative":"Framework/Developer/CoreModules/Almanac.md"}');export{g as comp,h as data};
