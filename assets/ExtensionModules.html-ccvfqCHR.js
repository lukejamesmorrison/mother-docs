import{_ as c,c as u,a as s,b as o,d as e,w as t,e as a,r as i,o as d}from"./app-D6-9_GiJ.js";const r={},m={class:"table-of-contents"},k={class:"hint-container note"};function v(b,n){const l=i("router-link"),p=i("RouteLink");return d(),u("div",null,[n[26]||(n[26]=s("h1",{id:"extension-modules",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#extension-modules"},[s("span",null,"Extension Modules")])],-1)),s("nav",m,[s("ul",null,[s("li",null,[e(l,{to:"#creating-an-extension-module"},{default:t(()=>n[0]||(n[0]=[a("Creating an Extension Module")])),_:1}),s("ul",null,[s("li",null,[e(l,{to:"#the-run-method"},{default:t(()=>n[1]||(n[1]=[a("The Run Method")])),_:1})])])]),s("li",null,[e(l,{to:"#commands"},{default:t(()=>n[2]||(n[2]=[a("Commands")])),_:1}),s("ul",null,[s("li",null,[e(l,{to:"#creating-a-custom-command"},{default:t(()=>n[3]||(n[3]=[a("Creating a Custom Command")])),_:1})])])]),s("li",null,[e(l,{to:"#events"},{default:t(()=>n[4]||(n[4]=[a("Events")])),_:1}),s("ul",null,[s("li",null,[e(l,{to:"#listening-for-events"},{default:t(()=>n[5]||(n[5]=[a("Listening For Events")])),_:1})]),s("li",null,[e(l,{to:"#emitting-events"},{default:t(()=>n[6]||(n[6]=[a("Emitting Events")])),_:1})])])])])]),n[27]||(n[27]=o(`<h2 id="creating-an-extension-module" tabindex="-1"><a class="header-anchor" href="#creating-an-extension-module"><span>Creating an Extension Module</span></a></h2><p>Extension modules expose several powerful capabilities for players to leverage. They must implement the <code>IExtensionModule</code> interface and it is recommended that they extend the <code>BaseExtensionModule</code> class. This class provides accessors for several core process that are commonly used across extension modules.</p><div class="code-block-title"><div class="code-block-title-bar"><span class="title" data-title="MissileGuidanceModule.cs">MissileGuidanceModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"></span>
<span class="line"><span class="token preprocessor property">### The \`Boot\` Method</span></span>
<span class="line">The \`<span class="token function">Boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\` method of every module <span class="token keyword">is</span> <span class="token class-name">called</span> during boot <span class="token keyword">by</span> Mother<span class="token punctuation">.</span>  Extension modules are registered <span class="token keyword">and</span> may access all <span class="token punctuation">[</span><span class="token class-name">Core</span> Module<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token range operator">..</span><span class="token operator">/</span>CoreModules<span class="token operator">/</span>CoreModules<span class="token punctuation">.</span>md<span class="token punctuation">)</span> instances<span class="token punctuation">.</span>  It <span class="token keyword">is</span> <span class="token class-name">important</span> to consider boot order to reduce conflicts among inter<span class="token operator">-</span>module dependencies <span class="token keyword">and</span> leverage <span class="token punctuation">[</span>Events<span class="token punctuation">]</span><span class="token punctuation">(</span>#events<span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token class-name">they</span> make sense<span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line">\`\`\`<span class="token class-name">csharp</span> title<span class="token operator">=</span><span class="token string">&quot;MissileGuidanceModule.cs&quot;</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">MissileGuidanceModule</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseExtensionModule</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Setup actions</span></span>
<span class="line">        <span class="token function">ConfigureWarheads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Register commands</span></span>
<span class="line">        Commands<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DetonateCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Subscribe to events</span></span>
<span class="line">        <span class="token function">Subscribe</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">WaypointReachedEvent</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">Subscribe</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">ReadyForLaunchEvent</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="the-run-method" tabindex="-1"><a class="header-anchor" href="#the-run-method"><span>The <code>Run</code> Method</span></a></h3>`,4)),s("p",null,[n[8]||(n[8]=a("You may also run processes each time the program cycles using the ")),n[9]||(n[9]=s("code",null,"Run()",-1)),n[10]||(n[10]=a(" method, though this is only recommended for specific use cases where you need the module to run every cycle. Otherwise it is advised to use the ")),e(p,{to:"/Framework/Developer/CoreModules/Clock.html"},{default:t(()=>n[7]||(n[7]=[a("Clock")])),_:1}),n[11]||(n[11]=a("'s ")),n[12]||(n[12]=s("code",null,"Schedule()",-1)),n[13]||(n[13]=a(" method to control the frequency, or use an ")),n[14]||(n[14]=s("a",{href:"#handling-events"},"Event",-1)),n[15]||(n[15]=a("."))]),n[28]||(n[28]=o(`<div class="code-block-title"><div class="code-block-title-bar"><span class="title" data-title="MissileGuidanceModule.cs">MissileGuidanceModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MissileGuidanceModule</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseExtensionModule</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Run every program cycle. </span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">DetermineCurrentPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">UpdateThrusters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">IsWithinTerminalRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ArmWarheads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="commands" tabindex="-1"><a class="header-anchor" href="#commands"><span>Commands</span></a></h2><p>Mother allows modules to define commands that can be executed by players or other modules. Commands implement the <code>ITerminalCommand</code> interface and are registered in the <code>Boot()</code> method of the module.</p><div class="code-block-title"><div class="code-block-title-bar"><span class="title" data-title="MissileGuidanceModule.cs">MissileGuidanceModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">MissileGuidanceModule</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseExtensionModule</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Register commands</span></span>
<span class="line">        Commands<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">LaunchCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        Commands<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DetonateCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="creating-a-custom-command" tabindex="-1"><a class="header-anchor" href="#creating-a-custom-command"><span>Creating a Custom Command</span></a></h3><p>To create a custom command, you must extends the <code>BaseModuleCommand</code> class. This class requires the <code>Execute()</code> method, which is called when the command is executed.</p><p>First we define the command <code>Name</code>:</p><div class="code-block-title"><div class="code-block-title-bar"><span class="title" data-title="LaunchCommand.cs">LaunchCommand.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LaunchCommand</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseModuleCommand</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// The name of the command</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token operator">=&gt;</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// or we can use a namespace to organize our </span></span>
<span class="line">    <span class="token comment">// commands by function or block   </span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token operator">=&gt;</span> <span class="token string">&quot;missile/launch&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>We also accept the module as a parameter in the constructor to allow our command access to its methods.</p><div class="code-block-title"><div class="code-block-title-bar"><span class="title" data-title="LaunchCommand.cs">LaunchCommand.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LaunchCommand</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseModuleCommand</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name">MissileGuidanceModule</span> Module <span class="token punctuation">{</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">LaunchCommand</span><span class="token punctuation">(</span><span class="token class-name">MissileGuidanceModule</span> module<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Module <span class="token operator">=</span> module<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now we implement the <code>Execute()</code> method, which will be called when the command is executed. The <code>Execute()</code> method takes an <code>ITerminalCommand</code> object as the only parameter.</p><div class="code-block-title"><div class="code-block-title-bar"><span class="title" data-title="LaunchCommand.cs">LaunchCommand.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LaunchCommand</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseModuleCommand</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">ITerminalCommand</span> command<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// first argument</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> targetCoordinate <span class="token operator">=</span> command<span class="token punctuation">.</span>Arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// second argument as a double</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> detonationDistance<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span>Arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">out</span> detonationDistance<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// get an option</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> maxSpeed <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">GetOption</span><span class="token punctuation">(</span><span class="token string">&quot;maxSpeed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// call method on module with arguments</span></span>
<span class="line">        Module<span class="token punctuation">.</span><span class="token function">Launch</span><span class="token punctuation">(</span>targetCoordinate<span class="token punctuation">,</span> detonationDistance<span class="token punctuation">,</span> maxSpeed<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="events" tabindex="-1"><a class="header-anchor" href="#events"><span>Events</span></a></h2><h3 id="listening-for-events" tabindex="-1"><a class="header-anchor" href="#listening-for-events"><span>Listening For Events</span></a></h3><p>Mother allows modules to emit and subscribe to events, allowing intermodule transmission. Once subscribed to an event, a module can intercept it via the <code>HandleEvent()</code> method each time it is emitted:</p><div class="code-block-title"><div class="code-block-title-bar"><span class="title" data-title="MissileGuidanceModule.cs">MissileGuidanceModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MissileGuidanceModule</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseExtensionModule</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Subscribe to the event during instantiation</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">MissileGuidanceModule</span><span class="token punctuation">(</span><span class="token class-name">Mother</span> mother<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Mother <span class="token operator">=</span> mother<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">Subscribe</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">WaypointReachedEvent</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Handle the event when it is emitted by a module</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">HandleEvent</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> eventName<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> eventData<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>eventName<span class="token punctuation">.</span><span class="token function">Equals</span><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">WaypointReachedEvent</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">           Mother<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;Waypoint Reached!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">           <span class="token function">Detonate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Detonate the warhead</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Detonate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="emitting-events" tabindex="-1"><a class="header-anchor" href="#emitting-events"><span>Emitting Events</span></a></h3><p>Modules can emit events using the <code>Emit()</code> method. This method takes an event object and an optional <code>object</code> of event data.</p><div class="code-block-title"><div class="code-block-title-bar"><span class="title" data-title="MissileGuidanceModule.cs">MissileGuidanceModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code><span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Detonate</span><span class="token punctuation">(</span><span class="token class-name">MyMissile</span> missile<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Emit the event.  </span></span>
<span class="line">        <span class="token comment">// We create the event with the missile instance, and then pass the </span></span>
<span class="line">        <span class="token comment">// missile object as event data via the second argument.</span></span>
<span class="line">        <span class="token function">Emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">MissileDetonatingEvent</span><span class="token punctuation">(</span>missile<span class="token punctuation">)</span><span class="token punctuation">,</span> missile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,19)),s("div",k,[n[25]||(n[25]=s("p",{class:"hint-container-title"},"Note",-1)),s("p",null,[n[17]||(n[17]=a("The ")),n[18]||(n[18]=s("code",null,"Emit()",-1)),n[19]||(n[19]=a(" and ")),n[20]||(n[20]=s("code",null,"Subscribe()",-1)),n[21]||(n[21]=a(" methods are accessors for the ")),e(p,{to:"/Framework/Developer/CoreModules/EventBus.html"},{default:t(()=>n[16]||(n[16]=[a("Event Bus")])),_:1}),n[22]||(n[22]=a(" via the ")),n[23]||(n[23]=s("code",null,"BaseExtensionModule",-1)),n[24]||(n[24]=a(" class."))])])])}const g=c(r,[["render",v],["__file","ExtensionModules.html.vue"]]),y=JSON.parse('{"path":"/Framework/Developer/ExtensionModules/ExtensionModules.html","title":"Extension Modules","lang":"en-US","frontmatter":{},"headers":[{"level":2,"title":"Creating an Extension Module","slug":"creating-an-extension-module","link":"#creating-an-extension-module","children":[{"level":3,"title":"The Run Method","slug":"the-run-method","link":"#the-run-method","children":[]}]},{"level":2,"title":"Commands","slug":"commands","link":"#commands","children":[{"level":3,"title":"Creating a Custom Command","slug":"creating-a-custom-command","link":"#creating-a-custom-command","children":[]}]},{"level":2,"title":"Events","slug":"events","link":"#events","children":[{"level":3,"title":"Listening For Events","slug":"listening-for-events","link":"#listening-for-events","children":[]},{"level":3,"title":"Emitting Events","slug":"emitting-events","link":"#emitting-events","children":[]}]}],"git":{"updatedTime":1743352100000,"contributors":[{"name":"Luke Morrison","username":"","email":"lukejamesmorrison@gmail.com","commits":2}],"changelog":[{"hash":"02fd8ad6929ba3f2afb6d865b3cc1e7747ccd1fb","time":1743352100000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"0.2.9 Update"},{"hash":"7c2fb0716f1b3a7b9765a5e6872cb915206257b5","time":1742428082000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"Initial commit"}]},"filePathRelative":"Framework/Developer/ExtensionModules/ExtensionModules.md"}');export{g as comp,y as data};
