import{_ as i,c as u,a as s,d as l,e as a,b as e,w as t,f as c,g as r}from"./app-DGHH2Nmc.js";const d={},k={class:"table-of-contents"};function m(g,n){const o=c("router-link"),p=c("RouteLink");return r(),u("div",null,[n[20]||(n[20]=s("h1",{id:"block-catalogue",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#block-catalogue"},[s("span",null,"Block Catalogue")])],-1)),n[21]||(n[21]=s("p",null,"The Block Catalogue one of Mother's biggest stars. It allows Mother to access all blocks on all connected grids easily. It also manages their configuration during boot and exposes blocks for use later.",-1)),n[22]||(n[22]=s("p",null,[a("When Mother boots, she will cache all "),s("code",null,"IMyTerminalBlock"),a(" blocks on the grid and subgrids.")],-1)),s("nav",k,[s("ul",null,[s("li",null,[e(o,{to:"#accessing-blocks"},{default:t(()=>n[0]||(n[0]=[a("Accessing Blocks",-1)])),_:1,__:[0]}),s("ul",null,[s("li",null,[e(o,{to:"#by-type"},{default:t(()=>n[1]||(n[1]=[a("By Type",-1)])),_:1,__:[1]})]),s("li",null,[e(o,{to:"#by-block-name"},{default:t(()=>n[2]||(n[2]=[a("By Block Name",-1)])),_:1,__:[2]})]),s("li",null,[e(o,{to:"#by-group-name"},{default:t(()=>n[3]||(n[3]=[a("By Group Name",-1)])),_:1,__:[3]})]),s("li",null,[e(o,{to:"#by-tag"},{default:t(()=>n[4]||(n[4]=[a("By Tag",-1)])),_:1,__:[4]})])])]),s("li",null,[e(o,{to:"#working-with-tags"},{default:t(()=>n[5]||(n[5]=[a("Working With Tags",-1)])),_:1,__:[5]}),s("ul",null,[s("li",null,[e(o,{to:"#setting-a-tag"},{default:t(()=>n[6]||(n[6]=[a("Setting a Tag",-1)])),_:1,__:[6]})]),s("li",null,[e(o,{to:"#getting-all-blocks-with-a-tag"},{default:t(()=>n[7]||(n[7]=[a("Getting All Blocks With a Tag",-1)])),_:1,__:[7]})])])]),s("li",null,[e(o,{to:"#hooks"},{default:t(()=>n[8]||(n[8]=[a("Hooks",-1)])),_:1,__:[8]}),s("ul",null,[s("li",null,[e(o,{to:"#running-a-hook"},{default:t(()=>n[9]||(n[9]=[a("Running a Hook",-1)])),_:1,__:[9]})]),s("li",null,[e(o,{to:"#creating-a-custom-hook"},{default:t(()=>n[10]||(n[10]=[a("Creating a Custom Hook",-1)])),_:1,__:[10]})])])]),s("li",null,[e(o,{to:"#block-configuration"},{default:t(()=>n[11]||(n[11]=[a("Block Configuration",-1)])),_:1,__:[11]})])])]),n[23]||(n[23]=l(`<h2 id="accessing-blocks" tabindex="-1"><a class="header-anchor" href="#accessing-blocks"><span>Accessing Blocks</span></a></h2><h3 id="by-type" tabindex="-1"><a class="header-anchor" href="#by-type"><span>By Type</span></a></h3><p>You can access blocks by their type, such as <code>IMyDoor</code>, <code>IMyLight</code>, etc. using the <code>GetBlocks()</code> method. This is the most basic way to access blocks.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">List<span class="token punctuation">&lt;</span>IMyThrust<span class="token punctuation">&gt;</span></span> thrusters <span class="token operator">=</span> BlockCatalogue<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetBlocks</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMyThrust<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>We can filter this with an option parameter:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">List<span class="token punctuation">&lt;</span>IMyThrust<span class="token punctuation">&gt;</span></span> retroThrusters <span class="token operator">=</span> BlockCatalogue<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetBlocks</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMyThrust<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">    block <span class="token operator">=&gt;</span> block<span class="token punctuation">.</span>CustomName<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;RetroThruster&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="by-block-name" tabindex="-1"><a class="header-anchor" href="#by-block-name"><span>By Block Name</span></a></h3><p>If you want to target blocks by their name, you can use the <code>GetBlocksByName()</code> method.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">List<span class="token punctuation">&lt;</span>IMyThrust<span class="token punctuation">&gt;</span></span> retroThrusters <span class="token operator">=</span> Mother<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetModule</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BlockCatalogue<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetBlocksByName</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMyThrust<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;RetroThruster&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="by-group-name" tabindex="-1"><a class="header-anchor" href="#by-group-name"><span>By Group Name</span></a></h3><p>If you want to target blocks by their group name, you can use the <code>GetBlocksBName()</code> method as well.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">List<span class="token punctuation">&lt;</span>IMyThrust<span class="token punctuation">&gt;</span></span> lateralThrusters <span class="token operator">=</span> Mother<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetModule</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BlockCatalogue<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetBlocksByName</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMyThrust<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Lateral Thrusters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="by-tag" tabindex="-1"><a class="header-anchor" href="#by-tag"><span>By Tag</span></a></h3><p>We also have the ability to access blocks with <a href="#working-with-tags">tags</a>. Again, we can reach for the <code>GetBlocksByName()</code> method. We will access our hydrogen engines with the tag <code>hydrogen</code> within their Custom Data.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">List<span class="token punctuation">&lt;</span>IMyThrust<span class="token punctuation">&gt;</span></span> lateralThrusters <span class="token operator">=</span> Mother<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetModule</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BlockCatalogue<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetBlocksByName</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMyThrust<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;#hydrogen&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="working-with-tags" tabindex="-1"><a class="header-anchor" href="#working-with-tags"><span>Working With Tags</span></a></h2><p>Tags allow us to create subgroups on our grid without using Grid Terminal System groups. The problem with using groups is that they merge together when connecting with other grids via a connector. This means that if you have a group called &quot;Lateral Thrusters&quot; on your ship, and you connect to another ship with the same group name, the two groups will merge into one causing conflict.</p><p><strong>Example Custom Data:</strong></p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Ion Thruster 1 &gt; Custom Data"><span>Ion Thruster 1 &gt; Custom Data</span></div><div class="language-ini line-numbers-mode" data-highlighter="prismjs" data-ext="ini"><pre><code class="language-ini"><span class="line"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">general</span><span class="token punctuation">]</span></span></span>
<span class="line"><span class="token key attr-name">tags</span><span class="token punctuation">=</span><span class="token value attr-value">lateral-thrusters</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Hydrogen Thruster 3 &gt; Custom Data"><span>Hydrogen Thruster 3 &gt; Custom Data</span></div><div class="language-ini line-numbers-mode" data-highlighter="prismjs" data-ext="ini"><pre><code class="language-ini"><span class="line"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">general</span><span class="token punctuation">]</span></span></span>
<span class="line"><span class="token key attr-name">tags</span><span class="token punctuation">=</span><span class="token value attr-value">retro-thruster</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="setting-a-tag" tabindex="-1"><a class="header-anchor" href="#setting-a-tag"><span>Setting a Tag</span></a></h3><p>To set a tag on a block, you can use the <code>SetBlockWithTag()</code> or <code>SetBlocksWithTag()</code> method. It accepts a block/group/tag name as its first parameter, and the tag to set as its second.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Add tag to the a single block - RetroThruster</span></span>
<span class="line">BlockCatalogue<span class="token punctuation">.</span><span class="token function">SetBlockWithTag</span><span class="token punctuation">(</span><span class="token string">&quot;RetroThruster&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;retro-thruster&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Add the tag &quot;lateral-thrusters&quot; to all blocks in the group &quot;Lateral Thrusters&quot;</span></span>
<span class="line">BlockCatalogue<span class="token punctuation">.</span><span class="token function">SetBlocksWithTag</span><span class="token punctuation">(</span><span class="token string">&quot;Lateral Thrusters&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;lateral-thrusters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getting-all-blocks-with-a-tag" tabindex="-1"><a class="header-anchor" href="#getting-all-blocks-with-a-tag"><span>Getting All Blocks With a Tag</span></a></h3><p>To get all blocks with a specific tag, you can use the <code>GetBlocksByTag()</code> method. This will return a <code>List&lt;IMyTerminalBlock&gt;</code> of blocks where the tag is set in their Custom Data.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">List<span class="token punctuation">&lt;</span>IMyTerminalBlock<span class="token punctuation">&gt;</span></span> lateralThrusters <span class="token operator">=</span> BlockCatalogue<span class="token punctuation">.</span><span class="token function">GetBlocksByTag</span><span class="token punctuation">(</span><span class="token string">&quot;lateral-thrusters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="hooks" tabindex="-1"><a class="header-anchor" href="#hooks"><span>Hooks</span></a></h2><p>Mother uses hooks as triggers when certain events occur. Players can define commands within the Custom Data field that will be excuted when a hook is run.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Connector &gt; Custom Data"><span>Connector &gt; Custom Data</span></div><div class="language-ini line-numbers-mode" data-highlighter="prismjs" data-ext="ini"><pre><code class="language-ini"><span class="line"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">hooks</span><span class="token punctuation">]</span></span></span>
<span class="line"><span class="token key attr-name">onLock</span><span class="token punctuation">=</span><span class="token value attr-value">light/color ConnectorLight red;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="running-a-hook" tabindex="-1"><a class="header-anchor" href="#running-a-hook"><span>Running a Hook</span></a></h3>`,30)),s("p",null,[n[13]||(n[13]=a("Mother registers all hooks during boot, so we only have to target the correct block with the name of the hook. This is most practical to use when using ",-1)),e(p,{to:"/Framework/Developer/BuildingAModule/BuildingAModule.html#block-state-changes"},{default:t(()=>n[12]||(n[12]=[a("block state changes",-1)])),_:1,__:[12]}),n[14]||(n[14]=a(" to trigger hooks.",-1))]),n[24]||(n[24]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="ConnectorModule.cs"><span>ConnectorModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">IMyShipConnector</span> connector <span class="token operator">=</span> Mother<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetModule</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BlockCatalogue<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetBlocksByName</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMyShipConnector<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Connector&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// run the onLock hook for the connector</span></span>
<span class="line">Mother<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetModule</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BlockCatalogue<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">RunHook</span><span class="token punctuation">(</span>connector<span class="token punctuation">,</span> <span class="token string">&quot;onLock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="creating-a-custom-hook" tabindex="-1"><a class="header-anchor" href="#creating-a-custom-hook"><span>Creating a Custom Hook</span></a></h3>`,2)),s("p",null,[n[16]||(n[16]=a("We can also define custom hooks to expand what the player has access to. Remember that during an Extension Module's boot process, we can register blocks for state monitoring. Let's see how we do this in the ",-1)),n[17]||(n[17]=s("code",null,"ConnectorModule",-1)),n[18]||(n[18]=a(" of ",-1)),e(p,{to:"/IngameScript/IngameScript.html"},{default:t(()=>n[15]||(n[15]=[a("Mother OS",-1)])),_:1,__:[15]}),n[19]||(n[19]=a(":",-1))]),n[25]||(n[25]=l(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="ConnectorModule.cs"><span>ConnectorModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConnectorModule</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseCoreModule</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// register the block for ongoing state monitoring</span></span>
<span class="line">        <span class="token generic-method"><span class="token function">RegisterBlockTypeForStateMonitoring</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMyShipConnector<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">            connector <span class="token operator">=&gt;</span> connector<span class="token punctuation">.</span>Status<span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">(</span>block<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">HandleConnectorStateChange</span><span class="token punctuation">(</span>block <span class="token keyword">as</span> <span class="token class-name">IMyShipConnector</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Notice the <code>HandleConnectorStateChange()</code> method we are calling when the block&#39;s state changes. Let&#39;s imagine we can currently handle the <code>onLock</code> and <code>onUnlock</code> hooks. Our method uses the new state to determine what to do.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ConnectorModule.cs"><span>ConnectorModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">HandleConnectorStateChange</span><span class="token punctuation">(</span><span class="token class-name">IMyShipConnector</span> connector<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> newState<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> status <span class="token operator">=</span> newState <span class="token keyword">as</span> <span class="token class-name">MyShipConnectorStatus<span class="token punctuation">?</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> previousStatus <span class="token operator">=</span> PreviousStates<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>connector<span class="token punctuation">.</span>EntityId<span class="token punctuation">)</span> </span>
<span class="line">        <span class="token punctuation">?</span> PreviousStates<span class="token punctuation">[</span>connector<span class="token punctuation">.</span>EntityId<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token class-name">MyShipConnectorStatus<span class="token punctuation">?</span></span> </span>
<span class="line">        <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// We are docked</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> MyShipConnectorStatus<span class="token punctuation">.</span>Connected<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        BlockCatalogue<span class="token punctuation">.</span><span class="token function">RunHook</span><span class="token punctuation">(</span>connector<span class="token punctuation">,</span> <span class="token string">&quot;onLock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// We are undocked</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token punctuation">(</span></span>
<span class="line">            status <span class="token operator">==</span> MyShipConnectorStatus<span class="token punctuation">.</span>Connectable </span>
<span class="line">            <span class="token operator">&amp;&amp;</span> previousStatus <span class="token operator">==</span> MyShipConnectorStatus<span class="token punctuation">.</span>Connected</span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">        <span class="token operator">||</span> status <span class="token operator">==</span> MyShipConnectorStatus<span class="token punctuation">.</span>Unconnected</span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        BlockCatalogue<span class="token punctuation">.</span><span class="token function">RunHook</span><span class="token punctuation">(</span>connector<span class="token punctuation">,</span> <span class="token string">&quot;onUnlock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>In our connector&#39;s Custom Data, we can target these hooks:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Connector &gt; Custom Data"><span>Connector &gt; Custom Data</span></div><div class="language-ini line-numbers-mode" data-highlighter="prismjs" data-ext="ini"><pre><code class="language-ini"><span class="line"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">hooks</span><span class="token punctuation">]</span></span></span>
<span class="line"><span class="token key attr-name">onLock</span><span class="token punctuation">=</span> <span class="token value attr-value">light/color &quot;Dock Light&quot; red;</span></span>
<span class="line"><span class="token key attr-name">onUnlock</span><span class="token punctuation">=</span> <span class="token value attr-value">light/color &quot;Dock Light&quot; green;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>If we want to add an <code>onReady</code> hook, we simply add it to the <code>HandleConnectorStateChange()</code> method above:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="ConnectorModule.cs"><span>ConnectorModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">protected</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">HandleConnectorStateChange</span><span class="token punctuation">(</span><span class="token class-name">IMyShipConnector</span> connector<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> newState<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> status <span class="token operator">=</span> newState <span class="token keyword">as</span> <span class="token class-name">MyShipConnectorStatus<span class="token punctuation">?</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> previousStatus <span class="token operator">=</span> PreviousStates<span class="token punctuation">.</span><span class="token function">ContainsKey</span><span class="token punctuation">(</span>connector<span class="token punctuation">.</span>EntityId<span class="token punctuation">)</span> </span>
<span class="line">        <span class="token punctuation">?</span> PreviousStates<span class="token punctuation">[</span>connector<span class="token punctuation">.</span>EntityId<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token class-name">MyShipConnectorStatus<span class="token punctuation">?</span></span> </span>
<span class="line">        <span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// We are docked</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// We are undocked</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// We are ready to lock</span></span>
<span class="line">    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">==</span> MyShipConnectorStatus<span class="token punctuation">.</span>Connectable<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        BlockCatalogue<span class="token punctuation">.</span><span class="token function">RunHook</span><span class="token punctuation">(</span>connector<span class="token punctuation">,</span> <span class="token string">&quot;onReady&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>That&#39;s it. Now you can use the <code>onReady</code> hook in any connector&#39;s Custom Data.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Connector &gt; Custom Data"><span>Connector &gt; Custom Data</span></div><div class="language-ini line-numbers-mode" data-highlighter="prismjs" data-ext="ini"><pre><code class="language-ini"><span class="line"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">hooks</span><span class="token punctuation">]</span></span></span>
<span class="line"><span class="token key attr-name">onReady</span><span class="token punctuation">=</span> <span class="token value attr-value">light/color &quot;Dock Light&quot; yellow;</span></span>
<span class="line"><span class="token key attr-name">onLock</span><span class="token punctuation">=</span> <span class="token value attr-value">light/color &quot;Dock Light&quot; red;</span></span>
<span class="line"><span class="token key attr-name">onUnlock</span><span class="token punctuation">=</span> <span class="token value attr-value">light/color &quot;Dock Light&quot; green;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="block-configuration" tabindex="-1"><a class="header-anchor" href="#block-configuration"><span>Block Configuration</span></a></h2><p>You can configure a block using its Custom Data field. Mother uses the existing <a href="https://github.com/malware-dev/MDK-SE/wiki/VRage.Game.ModAPI.Ingame.Utilities.MyIni" target="_blank" rel="noopener noreferrer">MyIni</a> class to parse block configuration.</p><p>To get a blocks configuration, you can use the <code>GetBlockConfiguration()</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">IMyTextPanel</span> textPanel <span class="token operator">=</span> BlockCatalogue<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetBlocksByName</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMyTextPanel<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;HUD Display&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">FirstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">MyIni</span> config <span class="token operator">=</span> BlockCatalogue<span class="token punctuation">.</span><span class="token function">GetBlockConfiguration</span><span class="token punctuation">(</span>textPanel<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If we want to get a specific value from the configuration, we can use the <code>Get()</code> method:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// get the color of the display from the general section</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">string</span></span> displayColor <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">&quot;general&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;color&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,15))])}const v=i(d,[["render",m]]),b=JSON.parse('{"path":"/Framework/Developer/CoreModules/BlockCatalogue.html","title":"Block Catalogue","lang":"en-US","frontmatter":{},"git":{"updatedTime":1754690910000,"contributors":[{"name":"Luke Morrison","username":"","email":"lukejamesmorrison@gmail.com","commits":1},{"name":"lukejamesmorrison","username":"lukejamesmorrison","email":"30843159+lukejamesmorrison@users.noreply.github.com","commits":2,"url":"https://github.com/lukejamesmorrison"}],"changelog":[{"hash":"effd9d96219e3b940efebaae7ff63d6eda576759","time":1754690910000,"email":"30843159+lukejamesmorrison@users.noreply.github.com","author":"Luke","message":"Major update to Core pages"},{"hash":"656cfacdf436e6faca234cf77b83f77ed2c9c8d2","time":1751234971000,"email":"30843159+lukejamesmorrison@users.noreply.github.com","author":"Luke","message":"Finish first draft of framework documentation"},{"hash":"db312309835110752ea2b209f7c3efbf6e7d9264","time":1744758309000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"dev initial commit"}]},"filePathRelative":"Framework/Developer/CoreModules/BlockCatalogue.md"}');export{v as comp,b as data};
