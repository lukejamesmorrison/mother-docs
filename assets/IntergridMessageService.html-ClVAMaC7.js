import{_ as o,c,a as s,d as i,b as e,w as t,r as l,o as u,e as p}from"./app-BVsDFP5k.js";const r={},d={class:"table-of-contents"};function k(m,n){const a=l("router-link");return u(),c("div",null,[n[14]||(n[14]=s("h1",{id:"intergrid-message-service",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#intergrid-message-service"},[s("span",null,"Intergrid Message Service")])],-1)),n[15]||(n[15]=s("p",null,"Mother uses a Request/Response pattern for intergrid communication. Every instance of Mother Core uses this system to share information and enable remote command execution.",-1)),s("nav",d,[s("ul",null,[s("li",null,[e(a,{to:"#request"},{default:t(()=>n[0]||(n[0]=[p("Request")])),_:1,__:[0]}),s("ul",null,[s("li",null,[e(a,{to:"#the-request-object"},{default:t(()=>n[1]||(n[1]=[p("The Request Object")])),_:1,__:[1]})]),s("li",null,[e(a,{to:"#sending-a-request"},{default:t(()=>n[2]||(n[2]=[p("Sending a Request")])),_:1,__:[2]})]),s("li",null,[e(a,{to:"#open-broadcast"},{default:t(()=>n[3]||(n[3]=[p("Open Broadcast")])),_:1,__:[3]})]),s("li",null,[e(a,{to:"#direct-broadcast"},{default:t(()=>n[4]||(n[4]=[p("Direct Broadcast")])),_:1,__:[4]})])])]),s("li",null,[e(a,{to:"#response"},{default:t(()=>n[5]||(n[5]=[p("Response")])),_:1,__:[5]}),s("ul",null,[s("li",null,[e(a,{to:"#the-response-object"},{default:t(()=>n[6]||(n[6]=[p("The Response Object")])),_:1,__:[6]})]),s("li",null,[e(a,{to:"#handing-a-response"},{default:t(()=>n[7]||(n[7]=[p("Handing A Response")])),_:1,__:[7]})])])]),s("li",null,[e(a,{to:"#routes"},{default:t(()=>n[8]||(n[8]=[p("Routes")])),_:1,__:[8]})]),s("li",null,[e(a,{to:"#intergrid-communication-service"},{default:t(()=>n[9]||(n[9]=[p("Intergrid Communication Service")])),_:1,__:[9]}),s("ul",null,[s("li",null,[e(a,{to:"#sending-open-broadcast"},{default:t(()=>n[10]||(n[10]=[p("Sending Open Broadcast")])),_:1,__:[10]})]),s("li",null,[e(a,{to:"#sending-a-direct-message"},{default:t(()=>n[11]||(n[11]=[p("Sending a direct message")])),_:1,__:[11]})]),s("li",null,[e(a,{to:"#sending-encrypted-messages"},{default:t(()=>n[12]||(n[12]=[p("Sending Encrypted Messages")])),_:1,__:[12]})]),s("li",null,[e(a,{to:"#using-channels"},{default:t(()=>n[13]||(n[13]=[p("Using Channels")])),_:1,__:[13]})])])])])]),n[16]||(n[16]=i(`<h2 id="request" tabindex="-1"><a class="header-anchor" href="#request"><span>Request</span></a></h2><h3 id="the-request-object" tabindex="-1"><a class="header-anchor" href="#the-request-object"><span>The Request Object</span></a></h3><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// show how to create a request object with custom body and headers.</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="sending-a-request" tabindex="-1"><a class="header-anchor" href="#sending-a-request"><span>Sending a Request</span></a></h3><h3 id="open-broadcast" tabindex="-1"><a class="header-anchor" href="#open-broadcast"><span>Open Broadcast</span></a></h3><p>Open broadcasts go to all grids on the antenna network. This is most appropriate for public channels and 1-to-many interactions.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// show how to send an open broadcast request and manage the response</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="IntergridMessageService.cs"><span>IntergridMessageService.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SendLifeSupportInformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// get h2 levels</span></span>
<span class="line">    <span class="token comment">// get o2 levels</span></span>
<span class="line">    <span class="token comment">// get power levels</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// create request with custom body</span></span>
<span class="line">    <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> requestBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;h2&quot;</span><span class="token punctuation">,</span> h2Level <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;o2&quot;</span><span class="token punctuation">,</span> o2Level <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;power&quot;</span><span class="token punctuation">,</span> powerLevel <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token function">CreateRequest</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// SendOpenBroadcastRequest(request, OnLifeSupportResponse);</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="direct-broadcast" tabindex="-1"><a class="header-anchor" href="#direct-broadcast"><span>Direct Broadcast</span></a></h3><p>Direct broadcasts go to a specific grid on the antenna network. This is most appropriate for private channels and 1-to-1 interactions.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// show how to send a direct broadcast request and manage the response</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="response" tabindex="-1"><a class="header-anchor" href="#response"><span>Response</span></a></h2><h3 id="the-response-object" tabindex="-1"><a class="header-anchor" href="#the-response-object"><span>The Response Object</span></a></h3><h4 id="response-types" tabindex="-1"><a class="header-anchor" href="#response-types"><span>Response Types</span></a></h4><h3 id="handing-a-response" tabindex="-1"><a class="header-anchor" href="#handing-a-response"><span>Handing A Response</span></a></h3><h2 id="routes" tabindex="-1"><a class="header-anchor" href="#routes"><span>Routes</span></a></h2><hr><h2 id="intergrid-communication-service" tabindex="-1"><a class="header-anchor" href="#intergrid-communication-service"><span>Intergrid Communication Service</span></a></h2><p>Sending messages between grids is a core capability of Mother, and this can be done in a variety of ways depending on your level of security.</p><h3 id="sending-open-broadcast" tabindex="-1"><a class="header-anchor" href="#sending-open-broadcast"><span>Sending Open Broadcast</span></a></h3><p>The most common case is sending an open broadcast to other grids. This is most appropriate for public channels. An open broadcast will be sent to all grids on the antenna network channel.</p><p>Let&#39;s look at how we <code>ping</code> other grids:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token preprocessor property"># IntergridMessageService.cs</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">Vector3D</span> currentPosition <span class="token operator">=</span> Mother<span class="token punctuation">.</span>Grid<span class="token punctuation">.</span><span class="token function">GetPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> requestBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> requestHeader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;OriginId&quot;</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">Mother<span class="token punctuation">.</span>Id</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;OriginName&quot;</span><span class="token punctuation">,</span> Mother<span class="token punctuation">.</span>Grid<span class="token punctuation">.</span>CustomName <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;Path&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ping&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">currentPosition<span class="token punctuation">.</span>X</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">currentPosition<span class="token punctuation">.</span>Y</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;z&quot;</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">currentPosition<span class="token punctuation">.</span>Z</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Request</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">,</span> requestHeader<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">SendOpenBroadcastRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> OnPingResponse<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>First we create the Request with the relevant payload - Body, and Header. Then we send it via open broadcast. Finally, we can set a callback to be run when a Response has been received to our outgoing message.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"></span>
<span class="line"><span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnPingResponse</span><span class="token punctuation">(</span><span class="token class-name">Response</span> response<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Update Record in Almanac</span></span>
<span class="line">    <span class="token class-name">AlmanacRecord</span> almanacRecord <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">AlmanacRecord</span><span class="token punctuation">(</span></span>
<span class="line">        response<span class="token punctuation">.</span><span class="token function">BString</span><span class="token punctuation">(</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token string">&quot;grid&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3D</span><span class="token punctuation">(</span></span>
<span class="line">            response<span class="token punctuation">.</span><span class="token function">BDouble</span><span class="token punctuation">(</span><span class="token string">&quot;x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            response<span class="token punctuation">.</span><span class="token function">BDouble</span><span class="token punctuation">(</span><span class="token string">&quot;y&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">            response<span class="token punctuation">.</span><span class="token function">BDouble</span><span class="token punctuation">(</span><span class="token string">&quot;z&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    almanacRecord<span class="token punctuation">.</span><span class="token function">AddNickname</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">HString</span><span class="token punctuation">(</span><span class="token string">&quot;OriginName&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    Mother<span class="token punctuation">.</span>Almanac<span class="token punctuation">.</span><span class="token function">AddRecord</span><span class="token punctuation">(</span>almanacRecord<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sending-a-direct-message" tabindex="-1"><a class="header-anchor" href="#sending-a-direct-message"><span>Sending a direct message</span></a></h3><p>If you would like to send a direct message to another grid, this can be done via unicast. This is used when sending a remote command to another grid:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token preprocessor property"># IntergridMessageService.cs</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SendRequestFromRoutine</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">string</span></span> target<span class="token punctuation">,</span> <span class="token class-name">TerminalRoutine</span> routine<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// get target grid from Almanac</span></span>
<span class="line">    <span class="token class-name">Grid</span> grid <span class="token operator">=</span> Mother<span class="token punctuation">.</span>Almanac<span class="token punctuation">.</span><span class="token function">GetGridByIdentifier</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>grid <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token function">BuildCommandRequest</span><span class="token punctuation">(</span>routine<span class="token punctuation">.</span>UnpackedRoutineString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        request<span class="token punctuation">.</span><span class="token function">To</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token function">SendUnicastRequest</span><span class="token punctuation">(</span>grid<span class="token punctuation">.</span>Id<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sending-encrypted-messages" tabindex="-1"><a class="header-anchor" href="#sending-encrypted-messages"><span>Sending Encrypted Messages</span></a></h3><p>When playing in a PvP environment, it quickly becomes important to secure your communications so that other players cannot remotely command your grids running Mother. To do this, we can use Mother&#39;s built in encryption. Let&#39;s take a look at how we are using this during message transmission:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token preprocessor property"># IntergridMessageService.cs</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SendUnicastRequest</span><span class="token punctuation">(</span><span class="token class-name"><span class="token keyword">long</span></span> TargetId<span class="token punctuation">,</span> <span class="token class-name">IntergridMessageObject</span> message<span class="token punctuation">,</span> <span class="token class-name">Action<span class="token punctuation">&lt;</span>IntergridMessageObject<span class="token punctuation">&gt;</span></span> onResponse<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Register the message callback</span></span>
<span class="line">    activeRequests<span class="token punctuation">[</span><span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">message<span class="token punctuation">.</span>Header<span class="token punctuation">[</span><span class="token string">&quot;Id&quot;</span><span class="token punctuation">]</span></span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> onResponse<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// encrypt the message if necessary</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> outgoingMessage <span class="token operator">=</span> <span class="token return-type class-name">Encryption <span class="token punctuation">?</span></span></span>
<span class="line">        Mother<span class="token punctuation">.</span>Security<span class="token punctuation">.</span><span class="token function">Encrypt</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">:</span></span>
<span class="line">        message<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Send the message via unicast over the &quot;default&quot;</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">bool</span></span> success <span class="token operator">=</span> Mother<span class="token punctuation">.</span>IGC<span class="token punctuation">.</span><span class="token function">SendUnicastMessage</span><span class="token punctuation">(</span>TargetId<span class="token punctuation">,</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span> outgoingMessage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Mother<span class="token punctuation">.</span>EventBus<span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RequestFailedEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">else</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Mother<span class="token punctuation">.</span>EventBus<span class="token punctuation">.</span><span class="token function">Emit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">RequestSentEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="using-channels" tabindex="-1"><a class="header-anchor" href="#using-channels"><span>Using Channels</span></a></h3>`,32))])}const g=o(r,[["render",k],["__file","IntergridMessageService.html.vue"]]),b=JSON.parse('{"path":"/Framework/Developer/CoreModules/IntergridMessageService.html","title":"Intergrid Message Service","lang":"en-US","frontmatter":{},"git":{"updatedTime":1744933175000,"contributors":[{"name":"Luke Morrison","username":"","email":"lukejamesmorrison@gmail.com","commits":4}],"changelog":[{"hash":"15ee173564b47688d911d239bf1296182577deca","time":1744933175000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"Update docs"},{"hash":"f894df28734323dfee730c0dd29c28fed9ffa424","time":1744056546000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"v0.2.10 Update"},{"hash":"02fd8ad6929ba3f2afb6d865b3cc1e7747ccd1fb","time":1743352100000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"0.2.9 Update"},{"hash":"7c2fb0716f1b3a7b9765a5e6872cb915206257b5","time":1742428082000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"Initial commit"}]},"filePathRelative":"Framework/Developer/CoreModules/IntergridMessageService.md"}');export{g as comp,b as data};
