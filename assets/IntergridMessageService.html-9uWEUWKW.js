import{_ as r,c as u,a as n,b as e,d as i,w as t,e as a,f as l,g as d}from"./app-85OlVtp3.js";const k={},m={class:"table-of-contents"};function h(v,s){const c=l("Mermaid"),p=l("router-link"),o=l("RouteLink");return d(),u("div",null,[s[21]||(s[21]=n("h1",{id:"intergrid-message-service",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#intergrid-message-service"},[n("span",null,"Intergrid Message Service")])],-1)),s[22]||(s[22]=n("p",null,"Mother uses a Request/Response pattern for intergrid communication. Every instance of Mother Core uses this system to share information and enable remote command execution.",-1)),e(c,{id:"mermaid-6",code:"eJyFkV9rwjAUxd/7KS6Mri8KmrF/HYwZwb3syY29DB9Se2tD26RLMqpov/va1Gp1HSYQkpzfPSfhuu7WAeCCGx/qHYBnYszQ88ELmEZv0Ln8ZIqzIEVdqQ1stVzxjKnNVKZS1XVXlJJb8rAv7SIfuDZHLIqiHoZKFaI6UvfTUTW6YMa4oMmqVouYm/aNVhMyxMahlhWGXTHlAg/GQcqWSVfVuJQiPPnIjNSzFzp75h83g8rwC2Yt0+tlsbJaS6d0XcdZKZbH8Da395OvV8VDmCwAxy/D4fPuWgQ6f5rj9w9q0xx2QBuKLmxN9fvk3WxShBFoo2SC/r5Tg+Y4LHhoYp/ka8tXzlsmqp4YLoUPOpVF6ViFApKTVJ1LobGNnZzFjQ9xZPx4N7v5J470xP0CNpe/Bg=="}),n("nav",m,[n("ul",null,[n("li",null,[e(p,{to:"#requests"},{default:t(()=>s[0]||(s[0]=[a("Requests",-1)])),_:1,__:[0]}),n("ul",null,[n("li",null,[e(p,{to:"#the-request-object"},{default:t(()=>s[1]||(s[1]=[a("The Request Object",-1)])),_:1,__:[1]})]),n("li",null,[e(p,{to:"#sending-a-request"},{default:t(()=>s[2]||(s[2]=[a("Sending a Request",-1)])),_:1,__:[2]})]),n("li",null,[e(p,{to:"#open-broadcast"},{default:t(()=>s[3]||(s[3]=[a("Open Broadcast",-1)])),_:1,__:[3]})]),n("li",null,[e(p,{to:"#direct-broadcast"},{default:t(()=>s[4]||(s[4]=[a("Direct Broadcast",-1)])),_:1,__:[4]})])])]),n("li",null,[e(p,{to:"#responses"},{default:t(()=>s[5]||(s[5]=[a("Responses",-1)])),_:1,__:[5]}),n("ul",null,[n("li",null,[e(p,{to:"#the-response-object"},{default:t(()=>s[6]||(s[6]=[a("The Response Object",-1)])),_:1,__:[6]})]),n("li",null,[e(p,{to:"#response-types"},{default:t(()=>s[7]||(s[7]=[a("Response Types",-1)])),_:1,__:[7]})]),n("li",null,[e(p,{to:"#handing-a-response"},{default:t(()=>s[8]||(s[8]=[a("Handing A Response",-1)])),_:1,__:[8]})])])]),n("li",null,[e(p,{to:"#routes"},{default:t(()=>s[9]||(s[9]=[a("Routes",-1)])),_:1,__:[9]})]),n("li",null,[e(p,{to:"#encrypting-messages"},{default:t(()=>s[10]||(s[10]=[a("Encrypting Messages",-1)])),_:1,__:[10]})]),n("li",null,[e(p,{to:"#channels"},{default:t(()=>s[11]||(s[11]=[a("Channels",-1)])),_:1,__:[11]})])])]),s[23]||(s[23]=i(`<h2 id="requests" tabindex="-1"><a class="header-anchor" href="#requests"><span>Requests</span></a></h2><h3 id="the-request-object" tabindex="-1"><a class="header-anchor" href="#the-request-object"><span>The Request Object</span></a></h3><p>We can create a new request by providing a <code>path</code>, a <code>body</code> and optional <code>header</code>. By default, headers will be attached to the request related to the identity of both the sender and receiver, as well as the path of the request. The request body can contain serialized data.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Vector3D</span> targetPosition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3D</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> requestBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">{</span> <span class="token string">&quot;target&quot;</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">targetPosition</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token function">CreateRequest</span><span class="token punctuation">(</span><span class="token string">&quot;initiate-launch&quot;</span><span class="token punctuation">,</span> requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="sending-a-request" tabindex="-1"><a class="header-anchor" href="#sending-a-request"><span>Sending a Request</span></a></h3><h3 id="open-broadcast" tabindex="-1"><a class="header-anchor" href="#open-broadcast"><span>Open Broadcast</span></a></h3><p>Open broadcasts go to all grids on the antenna network. This is most appropriate for public channels and 1-to-many interactions.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="LifeSupportModule.cs"><span>LifeSupportModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SendLifeSupportInformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">IntergridMessageService</span> intergridMessageService <span class="token operator">=</span> Mother<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetModule</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IntergridMessageService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// get h2 levels</span></span>
<span class="line">    <span class="token comment">// get o2 levels</span></span>
<span class="line">    <span class="token comment">// get power levels</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// create request with custom body</span></span>
<span class="line">    <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> requestBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;h2&quot;</span><span class="token punctuation">,</span> h2Level <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;o2&quot;</span><span class="token punctuation">,</span> o2Level <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;power&quot;</span><span class="token punctuation">,</span> powerLevel <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Request</span> request <span class="token operator">=</span> intergridMessageService<span class="token punctuation">.</span><span class="token function">CreateRequest</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    intergridMessageService<span class="token punctuation">.</span><span class="token function">SendOpenBroadcastRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> OnLifeSupportResponse<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnLifeSupportResponse</span><span class="token punctuation">(</span><span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// do something when response is received</span></span>
<span class="line"> <span class="token punctuation">}</span>   </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="direct-broadcast" tabindex="-1"><a class="header-anchor" href="#direct-broadcast"><span>Direct Broadcast</span></a></h3>`,9)),n("p",null,[s[13]||(s[13]=a("Direct broadcasts go to a specific grid on the antenna network. This is most appropriate for private channels and 1-to-1 interactions. Mother will look for the target in the ",-1)),e(o,{to:"/Framework/Developer/Almanac.html"},{default:t(()=>s[12]||(s[12]=[a("Almanac",-1)])),_:1,__:[12]}),s[14]||(s[14]=a(" and send the request to the grid with the matching EntityId or name.",-1))]),s[24]||(s[24]=i(`<div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">SendLifeSupportInformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">IntergridMessageService</span> intergridMessageService <span class="token operator">=</span> Mother<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetModule</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IntergridMessageService<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// get h2 levels</span></span>
<span class="line">    <span class="token comment">// get o2 levels</span></span>
<span class="line">    <span class="token comment">// get power levels</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// create request with custom body</span></span>
<span class="line">    <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> requestBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;h2&quot;</span><span class="token punctuation">,</span> h2Level <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;o2&quot;</span><span class="token punctuation">,</span> o2Level <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">{</span> <span class="token string">&quot;power&quot;</span><span class="token punctuation">,</span> powerLevel <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">Request</span> request <span class="token operator">=</span> intergridMessageService<span class="token punctuation">.</span><span class="token function">CreateRequest</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// the name of the grid we are sending the request to</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">string</span></span> targetId <span class="token operator">=</span> <span class="token string">&quot;RefuellingPlatform&quot;</span></span>
<span class="line"></span>
<span class="line">    intergridMessageService<span class="token punctuation">.</span><span class="token function">SendUnicastRequest</span><span class="token punctuation">(</span>targetId<span class="token punctuation">,</span> request<span class="token punctuation">,</span> OnLifeSupportResponse<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnLifeSupportResponse</span><span class="token punctuation">(</span><span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>   </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="responses" tabindex="-1"><a class="header-anchor" href="#responses"><span>Responses</span></a></h2><h3 id="the-response-object" tabindex="-1"><a class="header-anchor" href="#the-response-object"><span>The Response Object</span></a></h3><p>The <code>Response</code> object should be created from the originating <a href="#the-request-object">Request</a> object. It contains the response body and header, as well as the status code of the response. It accepts a <code>Request</code>, a status code, and an optional body and header.</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token class-name">Vector3D</span> targetPosition <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Vector3D</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span> responseBody <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">Dictionary<span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"> <span class="token punctuation">{</span></span>
<span class="line">     <span class="token punctuation">{</span> <span class="token string">&quot;x&quot;</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">targetPosition<span class="token punctuation">.</span>X</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token punctuation">{</span> <span class="token string">&quot;y&quot;</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">targetPosition<span class="token punctuation">.</span>Y</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">     <span class="token punctuation">{</span> <span class="token string">&quot;z&quot;</span><span class="token punctuation">,</span> <span class="token interpolation-string"><span class="token string">$&quot;</span><span class="token interpolation"><span class="token punctuation">{</span><span class="token expression language-csharp">targetPosition<span class="token punctuation">.</span>Z</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"> <span class="token keyword">return</span> <span class="token function">CreateResponse</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> Response<span class="token punctuation">.</span>ResponseStatusCodes<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> responseBody<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="response-types" tabindex="-1"><a class="header-anchor" href="#response-types"><span>Response Types</span></a></h3><p>The response object can be used to send back a variety of response types, including:</p><h4 id="_200-general-status-codes" tabindex="-1"><a class="header-anchor" href="#_200-general-status-codes"><span>200 - General Status Codes</span></a></h4><table><thead><tr><th>Code</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>The request was successful.</td></tr><tr><td>201</td><td>COMMAND_EXECUTED</td><td>The command was executed successfully.</td></tr></tbody></table><h4 id="_400-authorization-status-codes" tabindex="-1"><a class="header-anchor" href="#_400-authorization-status-codes"><span>400 - Authorization Status Codes</span></a></h4><table><thead><tr><th>Code</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>401</td><td>UNAUTHORIZED</td><td>The request was unauthorized.</td></tr><tr><td>404</td><td>NOT_FOUND</td><td>The requested resource was not found.</td></tr></tbody></table><h4 id="_500-interal-error-codes" tabindex="-1"><a class="header-anchor" href="#_500-interal-error-codes"><span>500 - Interal Error Codes</span></a></h4><table><thead><tr><th>Code</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>500</td><td>ERROR</td><td>An internal server error occurred.</td></tr></tbody></table><h4 id="_600-docking-status-codes" tabindex="-1"><a class="header-anchor" href="#_600-docking-status-codes"><span>600 - Docking Status Codes</span></a></h4><table><thead><tr><th>Code</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>600</td><td>DOCKING_APPROVED</td><td>The docking request was approved.</td></tr><tr><td>601</td><td>DOCKING_DENIED</td><td>The docking request was denied.</td></tr><tr><td>602</td><td>DOCKING_COMPLETE</td><td>The docking process was completed successfully.</td></tr><tr><td>603</td><td>DOCKING_CANCELLED</td><td>The docking process was cancelled.</td></tr><tr><td>604</td><td>CONNECTOR_NOT_FOUND</td><td>The specified connector was not found.</td></tr></tbody></table><div class="hint-container info"><p class="hint-container-title">Info</p><p>Many of these codes remain unused by act as placeholders for future functionality.</p></div><h3 id="handing-a-response" tabindex="-1"><a class="header-anchor" href="#handing-a-response"><span>Handing A Response</span></a></h3><p>Like we saw earlier, when registering send a request, we can define a callback for when a Response is received:</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// send request to a target, and define what happens when a response is received</span></span>
<span class="line">intergridMessageService<span class="token punctuation">.</span><span class="token function">SendUnicastRequest</span><span class="token punctuation">(</span>targetId<span class="token punctuation">,</span> request<span class="token punctuation">,</span> OnLifeSupportResponse<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">OnLifeSupportResponse</span><span class="token punctuation">(</span><span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">    <span class="token comment">// do something when the response is received</span></span>
<span class="line"><span class="token punctuation">}</span>   </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="routes" tabindex="-1"><a class="header-anchor" href="#routes"><span>Routes</span></a></h2><p>If you would like your script to handle a request to a specific path, we can register this route in the module&#39;s <code>Boot()</code> method using the <code>AddRoute()</code> method.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MissileGuidanceModule.cs"><span>MissileGuidanceModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"> <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Register Routes</span></span>
<span class="line">    <span class="token function">AddRoute</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token string">&quot;initiate-launch&quot;</span><span class="token punctuation">,</span> </span>
<span class="line">        request <span class="token operator">=&gt;</span> <span class="token function">HandleInitiateLaunchRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="encrypting-messages" tabindex="-1"><a class="header-anchor" href="#encrypting-messages"><span>Encrypting Messages</span></a></h2><p>When playing in a PvP environment, it quickly becomes important to secure your communications so that other players cannot remotely command your grids running Mother. To do this, we can use Mother&#39;s built in encryption. Let&#39;s take a look at how we are using this during message transmission:</p>`,24)),n("p",null,[s[16]||(s[16]=a("To encrypt messages, we use the ",-1)),e(o,{to:"/Framework/Developer/Utilities/Security.html"},{default:t(()=>s[15]||(s[15]=[a("Security",-1)])),_:1,__:[15]}),s[17]||(s[17]=a(" utility.",-1))]),s[25]||(s[25]=i(`<h2 id="channels" tabindex="-1"><a class="header-anchor" href="#channels"><span>Channels</span></a></h2><p>Mother can communicate on multiple channels simultaneously. We do this by defining channels in the programmable block&#39;s custom data, and provide a passcode if we wish to encrypt communications on that channel.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Mother &gt; Custom Data"><span>Mother &gt; Custom Data</span></div><div class="language-ini line-numbers-mode" data-highlighter="prismjs" data-ext="ini"><pre><code class="language-ini"><span class="line"><span class="token section"><span class="token punctuation">[</span><span class="token section-name selector">channels</span><span class="token punctuation">]</span></span></span>
<span class="line"><span class="token comment">; Set public channel as available and unencrypted. </span></span>
<span class="line"><span class="token key attr-name">*</span><span class="token punctuation">=</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">; The private channels are encrypted if a passcode is provided.</span></span>
<span class="line"><span class="token key attr-name">MyFaction</span><span class="token punctuation">=</span><span class="token value attr-value">Sup3rSecr3tP@ssw0rd</span></span>
<span class="line"><span class="token key attr-name">OtherFaction</span><span class="token punctuation">=</span><span class="token value attr-value">An0therP@ssw0rd</span></span>
<span class="line"><span class="token comment">; No passcode means no encryption on this channel.</span></span>
<span class="line"><span class="token key attr-name">ThirdFaction</span><span class="token punctuation">=</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,3)),n("p",null,[s[19]||(s[19]=a("When sending broadcasts, Mother will chose a single channel to use for communication. This ensures that Mother is not overloading grids with multiples of the same request from different channels. This is done by assigning channels to ",-1)),e(o,{to:"/Framework/Developer/CoreModules/Almanac.html"},{default:t(()=>s[18]||(s[18]=[a("Almanac Records",-1)])),_:1,__:[18]}),s[20]||(s[20]=a(".",-1))])])}const b=r(k,[["render",h]]),f=JSON.parse('{"path":"/Framework/Developer/CoreModules/IntergridMessageService.html","title":"Intergrid Message Service","lang":"en-US","frontmatter":{},"git":{"updatedTime":1754690910000,"contributors":[{"name":"Luke Morrison","username":"","email":"lukejamesmorrison@gmail.com","commits":4},{"name":"lukejamesmorrison","username":"lukejamesmorrison","email":"30843159+lukejamesmorrison@users.noreply.github.com","commits":3,"url":"https://github.com/lukejamesmorrison"}],"changelog":[{"hash":"effd9d96219e3b940efebaae7ff63d6eda576759","time":1754690910000,"email":"30843159+lukejamesmorrison@users.noreply.github.com","author":"Luke","message":"Major update to Core pages"},{"hash":"1f9196b699309abacf2ddabaa614256faf86fae5","time":1751235410000,"email":"30843159+lukejamesmorrison@users.noreply.github.com","author":"Luke","message":"update intergrid message service"},{"hash":"656cfacdf436e6faca234cf77b83f77ed2c9c8d2","time":1751234971000,"email":"30843159+lukejamesmorrison@users.noreply.github.com","author":"Luke","message":"Finish first draft of framework documentation"},{"hash":"15ee173564b47688d911d239bf1296182577deca","time":1744933175000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"Update docs"},{"hash":"f894df28734323dfee730c0dd29c28fed9ffa424","time":1744056546000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"v0.2.10 Update"},{"hash":"02fd8ad6929ba3f2afb6d865b3cc1e7747ccd1fb","time":1743352100000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"0.2.9 Update"},{"hash":"7c2fb0716f1b3a7b9765a5e6872cb915206257b5","time":1742428082000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"Initial commit"}]},"filePathRelative":"Framework/Developer/CoreModules/IntergridMessageService.md"}');export{b as comp,f as data};
