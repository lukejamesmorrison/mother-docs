import{_ as c,c as u,a as s,d as p,b as e,w as t,e as a,r as i,o as d}from"./app-Bv-w2G5d.js";const r={},m={class:"table-of-contents"},k={class:"hint-container note"},v={class:"hint-container note"},b={class:"hint-container note"},h={class:"hint-container note"};function g(y,n){const l=i("router-link"),o=i("RouteLink");return d(),u("div",null,[n[57]||(n[57]=s("h1",{id:"extension-modules",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#extension-modules"},[s("span",null,"Extension Modules")])],-1)),n[58]||(n[58]=s("p",null,"Extension modules should be the main body of your scripts. This section will cover the basics of creating an extension module, registering custom terminal commands, and handling events.",-1)),s("nav",m,[s("ul",null,[s("li",null,[e(l,{to:"#creating-an-extension-module"},{default:t(()=>n[0]||(n[0]=[a("Creating an Extension Module")])),_:1,__:[0]}),s("ul",null,[s("li",null,[e(l,{to:"#booting-a-module"},{default:t(()=>n[1]||(n[1]=[a("Booting a Module")])),_:1,__:[1]})]),s("li",null,[e(l,{to:"#running-a-module"},{default:t(()=>n[2]||(n[2]=[a("Running a Module")])),_:1,__:[2]})]),s("li",null,[e(l,{to:"#registering-a-module"},{default:t(()=>n[3]||(n[3]=[a("Registering a Module")])),_:1,__:[3]})])])]),s("li",null,[e(l,{to:"#commands"},{default:t(()=>n[4]||(n[4]=[a("Commands")])),_:1,__:[4]}),s("ul",null,[s("li",null,[e(l,{to:"#creating-a-command"},{default:t(()=>n[5]||(n[5]=[a("Creating a Command")])),_:1,__:[5]})]),s("li",null,[e(l,{to:"#registering-a-command"},{default:t(()=>n[6]||(n[6]=[a("Registering a Command")])),_:1,__:[6]})])])]),s("li",null,[e(l,{to:"#events"},{default:t(()=>n[7]||(n[7]=[a("Events")])),_:1,__:[7]}),s("ul",null,[s("li",null,[e(l,{to:"#subscribing-to-events"},{default:t(()=>n[8]||(n[8]=[a("Subscribing to Events")])),_:1,__:[8]})]),s("li",null,[e(l,{to:"#emitting-events"},{default:t(()=>n[9]||(n[9]=[a("Emitting Events")])),_:1,__:[9]})])])]),s("li",null,[e(l,{to:"#blocks"},{default:t(()=>n[10]||(n[10]=[a("Blocks")])),_:1,__:[10]}),s("ul",null,[s("li",null,[e(l,{to:"#getting-blocks-from-the-grid"},{default:t(()=>n[11]||(n[11]=[a("Getting Blocks From the Grid")])),_:1,__:[11]})]),s("li",null,[e(l,{to:"#monitoring-blocks-for-changes"},{default:t(()=>n[12]||(n[12]=[a("Monitoring Blocks For Changes")])),_:1,__:[12]})])])])])]),n[59]||(n[59]=s("h2",{id:"creating-an-extension-module",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#creating-an-extension-module"},[s("span",null,"Creating an Extension Module")])],-1)),n[60]||(n[60]=s("p",null,[a("Extension modules must implement the "),s("code",null,"IExtensionModule"),a(" interface. It is recommended that they extend the "),s("code",null,"BaseExtensionModule"),a(" class which provides accessors for many common actions.")],-1)),s("div",k,[n[15]||(n[15]=s("p",{class:"hint-container-title"},"Note",-1)),s("p",null,[e(o,{to:"/IngameScript/IngameScript.html"},{default:t(()=>n[13]||(n[13]=[a("Mother OS")])),_:1,__:[13]}),n[14]||(n[14]=a(" is composed mostly of extension modules to enable it's various capabilities."))])]),n[61]||(n[61]=s("h3",{id:"booting-a-module",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#booting-a-module"},[s("span",null,"Booting a Module")])],-1)),s("p",null,[n[17]||(n[17]=a("The ")),n[18]||(n[18]=s("code",null,"Boot()",-1)),n[19]||(n[19]=a(" method of every module is called during boot by Mother. When Extension modules boot, they may access all ")),e(o,{to:"/Framework/Developer/CoreModules/CoreModules.html"},{default:t(()=>n[16]||(n[16]=[a("Core Module")])),_:1,__:[16]}),n[20]||(n[20]=a(" instances. It is important to consider boot order to reduce conflicts among inter-module dependencies and leverage ")),n[21]||(n[21]=s("a",{href:"#events"},"Events",-1)),n[22]||(n[22]=a(" where they make sense."))]),n[62]||(n[62]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="MissileGuidanceModule.cs"><span>MissileGuidanceModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">MissileGuidanceModule</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseExtensionModule</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Register commands</span></span>
<span class="line">        <span class="token function">RegisterCommand</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DetonateCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Subscribe to events</span></span>
<span class="line">        <span class="token generic-method"><span class="token function">Subscribe</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>WaypointReachedEvent<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token generic-method"><span class="token function">Subscribe</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ReadyForLaunchEvent<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Setup actions</span></span>
<span class="line">        <span class="token function">ConfigureWarheads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="running-a-module" tabindex="-1"><a class="header-anchor" href="#running-a-module"><span>Running a Module</span></a></h3>`,2)),s("p",null,[n[24]||(n[24]=a("You may also run processes each time the program cycles using the ")),n[25]||(n[25]=s("code",null,"Run()",-1)),n[26]||(n[26]=a(" method, though this is only recommended for specific use cases where you need the module to run every cycle. Otherwise it is advised to use the ")),e(o,{to:"/Framework/Developer/CoreModules/Clock.html"},{default:t(()=>n[23]||(n[23]=[a("Clock")])),_:1,__:[23]}),n[27]||(n[27]=a("'s ")),n[28]||(n[28]=s("code",null,"Schedule()",-1)),n[29]||(n[29]=a(" method to control the frequency, or use an ")),n[30]||(n[30]=s("a",{href:"#handling-events"},"Event",-1)),n[31]||(n[31]=a("."))]),n[63]||(n[63]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="MissileGuidanceModule.cs"><span>MissileGuidanceModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">class</span> <span class="token class-name">MissileGuidanceModule</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseExtensionModule</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Run every program cycle. </span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">DetermineCurrentPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">UpdateThrusters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">IsWithinTerminalRange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">ArmWarheads</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="registering-a-module" tabindex="-1"><a class="header-anchor" href="#registering-a-module"><span>Registering a Module</span></a></h3><p>Mother makes it easy to register Extension Modules via the <code>RegisterModule</code> method. This ensure our module is accessible when Mother boots.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="Program.cs"><span>Program.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// Instantiate module</span></span>
<span class="line"><span class="token class-name">MissileGuidanceModule</span> module <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token constructor-invocation class-name">MissileGuidanceModule</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// Register module with Mother</span></span>
<span class="line">Mother<span class="token punctuation">.</span><span class="token function">RegisterModule</span><span class="token punctuation">(</span>module<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>Extension Modules must conform the the <code>IExtensionModule</code> interface.</p></div><h2 id="commands" tabindex="-1"><a class="header-anchor" href="#commands"><span>Commands</span></a></h2><p>Mother allows modules to register commands that can be executed by players or other modules. Commands implement the <code>ITerminalCommand</code> interface and are registered in the <code>Boot()</code> method of the module.</p><h3 id="creating-a-command" tabindex="-1"><a class="header-anchor" href="#creating-a-command"><span>Creating a Command</span></a></h3><p>To create a custom command, you can extend the <code>BaseModuleCommand</code> class. This class requires the <code>Execute()</code> method, which is called when the command is executed. It gives us access to several useful methods that are commonly used in commands.</p><p>First we define the command <code>Name</code>:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="LaunchCommand.cs"><span>LaunchCommand.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LaunchCommand</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseModuleCommand</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// The name of the command</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token operator">=&gt;</span> <span class="token string">&quot;launch&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// or we can use a namespace to organize our </span></span>
<span class="line">    <span class="token comment">// commands by function or block   </span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> Name <span class="token operator">=&gt;</span> <span class="token string">&quot;missile/launch&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>We instantiate the command with the module as a parameter in the constructor for easy reference.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="LaunchCommand.cs"><span>LaunchCommand.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LaunchCommand</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseModuleCommand</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">readonly</span> <span class="token class-name">MissileGuidanceModule</span> Module<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token function">LaunchCommand</span><span class="token punctuation">(</span><span class="token class-name">MissileGuidanceModule</span> module<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        Module <span class="token operator">=</span> module<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>Now we implement the <code>Execute()</code> method, which will be called when the command is executed via a player command or other trigger. The method takes an <code>ITerminalCommand</code> object as the only parameter and returns a <code>string</code> which will be printed in the terminal.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="LaunchCommand.cs"><span>LaunchCommand.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LaunchCommand</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseModuleCommand</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">string</span></span> <span class="token function">Execute</span><span class="token punctuation">(</span><span class="token class-name">ITerminalCommand</span> command<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// first argument</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> targetCoordinate <span class="token operator">=</span> command<span class="token punctuation">.</span>Arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// second argument as a double</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> detonationDistance<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">double</span><span class="token punctuation">.</span><span class="token function">TryParse</span><span class="token punctuation">(</span>command<span class="token punctuation">.</span>Arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">out</span> detonationDistance<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// get an option</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">string</span></span> maxSpeed <span class="token operator">=</span> command<span class="token punctuation">.</span><span class="token function">GetOption</span><span class="token punctuation">(</span><span class="token string">&quot;maxSpeed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// call Launch() method on parent module</span></span>
<span class="line">        <span class="token class-name"><span class="token keyword">bool</span></span> success <span class="token operator">=</span> Module<span class="token punctuation">.</span><span class="token function">Launch</span><span class="token punctuation">(</span>targetCoordinate<span class="token punctuation">,</span> detonationDistance<span class="token punctuation">,</span> maxSpeed<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token string">&quot;Missile Launched!&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token string">&quot;Missile Launch Failed!&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="registering-a-command" tabindex="-1"><a class="header-anchor" href="#registering-a-command"><span>Registering a Command</span></a></h3><p>To register a command, we use <code>RegisterCommand()</code> method. We define it in the <code>Boot()</code> method of the parent module. This method accepts an instance of the module to allow access to its specialized methods.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MissileGuidanceModule.cs"><span>MissileGuidanceModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MissileGuidanceModule</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseExtensionModule</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Register commands</span></span>
<span class="line">        <span class="token function">RegisterCommand</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">LaunchCommand</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">RegisterCommand</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token constructor-invocation class-name">DetonateCommand</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h2 id="events" tabindex="-1"><a class="header-anchor" href="#events"><span>Events</span></a></h2><h3 id="subscribing-to-events" tabindex="-1"><a class="header-anchor" href="#subscribing-to-events"><span>Subscribing to Events</span></a></h3><p>Mother allows modules to emit and subscribe to events, allowing modules to monitor the behaviour of other modules. Once subscribed to an event, a module can intercept it via the <code>HandleEvent()</code> method:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MissileGuidanceModule.cs"><span>MissileGuidanceModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MissileGuidanceModule</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseExtensionModule</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Subscribe to the event during instantiation</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token generic-method"><span class="token function">Subscribe</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>WaypointReachedEvent<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token comment">// Handle the event when it is emitted by a module</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">HandleEvent</span><span class="token punctuation">(</span><span class="token class-name">IEvent</span> e<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> eventData<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">is</span> <span class="token class-name">WaypointReachedEvent</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">           Mother<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span><span class="token string">&quot;Waypoint Reached!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">           <span class="token function">Detonate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// Detonate the warhead</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Detonate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="emitting-events" tabindex="-1"><a class="header-anchor" href="#emitting-events"><span>Emitting Events</span></a></h3><p>Modules can emit events using the <code>Emit()</code> method. This method takes an <code>IEvent</code> instances as a parameter and an optional <code>object</code> of event data.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MissileGuidanceModule.cs"><span>MissileGuidanceModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Detonate</span><span class="token punctuation">(</span><span class="token class-name">MyMissile</span> missile<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Emit the event.  </span></span>
<span class="line">        <span class="token comment">// We pass in the event type with missile object as event data.</span></span>
<span class="line">        <span class="token generic-method"><span class="token function">Emit</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>MissileDetonatingEvent<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>missile<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,25)),s("div",v,[n[41]||(n[41]=s("p",{class:"hint-container-title"},"Note",-1)),s("p",null,[n[33]||(n[33]=a("The ")),n[34]||(n[34]=s("code",null,"Emit()",-1)),n[35]||(n[35]=a(" and ")),n[36]||(n[36]=s("code",null,"Subscribe()",-1)),n[37]||(n[37]=a(" methods are accessors for the ")),e(o,{to:"/Framework/Developer/CoreModules/EventBus.html"},{default:t(()=>n[32]||(n[32]=[a("Event Bus")])),_:1,__:[32]}),n[38]||(n[38]=a(" via the ")),n[39]||(n[39]=s("code",null,"BaseExtensionModule",-1)),n[40]||(n[40]=a(" class."))])]),n[64]||(n[64]=p(`<h2 id="blocks" tabindex="-1"><a class="header-anchor" href="#blocks"><span>Blocks</span></a></h2><h3 id="getting-blocks-from-the-grid" tabindex="-1"><a class="header-anchor" href="#getting-blocks-from-the-grid"><span>Getting Blocks From the Grid</span></a></h3><p>Mother&#39;s Block Catalogue makes a ledger of all blocks on the grid when it boots. This allows us to access these blocks more efficiency when updated via commands or events. Any <code>IMyTerminalBlock</code> on your construct can be accessed via the <code>GetBlocks()</code> method. It accepts a block type parameter, which is the type of block you want to get. The method accepts an option <code>bool</code> parameter for filtering the retrived blocks.</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>See Malware&#39;s <a href="https://github.com/malware-dev/MDK-SE/wiki/Api-Index" target="_blank" rel="noopener noreferrer">API Index</a> for more information on block types.</p></div><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MissileGuidanceModule.cs"><span>MissileGuidanceModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MissileGuidanceModule</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseExtensionModule</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Get the Block Catalogue core module</span></span>
<span class="line">        <span class="token class-name">BlockCatalogue</span> BlockCatalogue <span class="token operator">=</span> Mother<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetModule</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BlockCatalogue<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Get all thrusters on the grid</span></span>
<span class="line">        <span class="token class-name">List<span class="token punctuation">&lt;</span>IMyThrust<span class="token punctuation">&gt;</span></span> thrusters <span class="token operator">=</span> BlockCatalogue</span>
<span class="line">            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetBlocks</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMyThrust<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// or, only get blocks where name contains a key</span></span>
<span class="line">        <span class="token class-name">List<span class="token punctuation">&lt;</span>IMyThrust<span class="token punctuation">&gt;</span></span> thrusters <span class="token operator">=</span> BlockCatalogue</span>
<span class="line">            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetBlocks</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMyThrust<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>block <span class="token operator">=&gt;</span> block<span class="token punctuation">.</span>CustomName<span class="token punctuation">.</span><span class="token function">Contains</span><span class="token punctuation">(</span><span class="token string">&quot;key&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>The more practical situation is when we want to get a specific block on the grid, or multiple blocks within a <em>group</em>. This can be done by via the <code>GetBlocksByName()</code> method. It accepts a block type parameter, a string for the block or group name.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MissileGuidanceModule.cs"><span>MissileGuidanceModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MissileGuidanceModule</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">BaseExtensionModule</span></span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// Get the Block Catalogue core module</span></span>
<span class="line">        <span class="token class-name">BlockCatalogue</span> BlockCatalogue <span class="token operator">=</span> Mother<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetModule</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>BlockCatalogue<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// Get the thrusters in the group &quot;Booster Thrusters&quot;</span></span>
<span class="line">        <span class="token class-name">List<span class="token punctuation">&lt;</span>IMyThrust<span class="token punctuation">&gt;</span></span> thrusters <span class="token operator">=</span> BlockCatalogue</span>
<span class="line">            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetBlocksByName</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMyThrust<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;Booster Thrusters&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// or, get a specific block by name</span></span>
<span class="line">        <span class="token class-name">IMyThrust</span> thruster <span class="token operator">=</span> BlockCatalogue</span>
<span class="line">            <span class="token punctuation">.</span><span class="token generic-method"><span class="token function">GetBlocksByName</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMyThrust<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">&quot;RetroThruster&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">.</span><span class="token function">firstOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><div class="hint-container important"><p class="hint-container-title">Important</p><p>Mother treats all blocks connected via hinges, rotors, and pistons as a single <strong>construct</strong>. It is fully compatible with subgrids and will not interfere with blocks on other grids via connector connections. Programmable blocks do not recompile correctly when unmerging grids via Merge Blocks.</p></div><h3 id="monitoring-blocks-for-changes" tabindex="-1"><a class="header-anchor" href="#monitoring-blocks-for-changes"><span>Monitoring Blocks For Changes</span></a></h3><h4 id="blocks-in-motion" tabindex="-1"><a class="header-anchor" href="#blocks-in-motion"><span>Blocks in Motion</span></a></h4>`,10)),s("p",null,[n[43]||(n[43]=a("Blocks that ")),n[44]||(n[44]=s("em",null,"move",-1)),n[45]||(n[45]=a(" can leverage the ")),e(o,{to:"/Framework/Developer/CoreModules/ActivityMonitor.html"},{default:t(()=>n[42]||(n[42]=[a("Activity Monitor")])),_:1,__:[42]}),n[46]||(n[46]=a(" to monitor their changing state ie. angle, distance. In the case of pistons, we can set a piston in motion, and then stop and lock it in place when it reaches the specified angle. For blocks that change state infrequently, ")),n[47]||(n[47]=s("a",{href:"#state-changes"},"monitoring for state changes",-1)),n[48]||(n[48]=a(" instead."))]),n[65]||(n[65]=p(`<div class="code-block-with-title"><div class="code-block-title-bar" data-title="MissileGuidanceModule.cs"><span>MissileGuidanceModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token comment">// in our module, we will define a method to open our shield flaps and register the piston motion </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></div>`,1)),s("div",b,[n[52]||(n[52]=s("p",{class:"hint-container-title"},"Note",-1)),s("p",null,[n[50]||(n[50]=a("The ")),e(o,{to:"/IngameScript/Modules/Extension/HingeModule.html#rotate"},{default:t(()=>n[49]||(n[49]=[a("hinge/rotate")])),_:1,__:[49]}),n[51]||(n[51]=a(" command is an example of where the activity monitor is used. Mother OS also used the Activity Monitor to track the motion of hinges and rotors."))])]),n[66]||(n[66]=p(`<h4 id="state-changes" tabindex="-1"><a class="header-anchor" href="#state-changes"><span>State Changes</span></a></h4><p>All blocks on the grid can also be monitored for state changes. The state value of blocks varies by type, so we will define the property to watch, and define an action to handle the state change when it occurs. We do this in the <code>Boot()</code> method of our module:</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MissileGuidanceModule.cs"><span>MissileGuidanceModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">Boot</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// Register connectors and monitor the Status property</span></span>
<span class="line">    <span class="token generic-method"><span class="token function">RegisterBlockTypeForStateMonitoring</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>IMyShipConnector<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">        connector <span class="token operator">=&gt;</span> connector<span class="token punctuation">.</span>Status<span class="token punctuation">,</span> </span>
<span class="line">        <span class="token punctuation">(</span>block<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">HandleConnectorStateChange</span><span class="token punctuation">(</span>block <span class="token keyword">as</span> <span class="token class-name">IMyShipConnector</span><span class="token punctuation">,</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div><p>We will create the <code>HandleConnectorStateChange()</code> method to accept the new state of the connector and emit an event.</p><div class="code-block-with-title"><div class="code-block-title-bar" data-title="MissileGuidanceModule.cs"><span>MissileGuidanceModule.cs</span></div><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs"><pre><code class="language-csharp"><span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">HandleConnectorStateChange</span><span class="token punctuation">(</span><span class="token class-name">IMyShipConnector</span> connector<span class="token punctuation">,</span> <span class="token class-name"><span class="token keyword">object</span></span> newState<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name"><span class="token keyword">var</span></span> status <span class="token operator">=</span> newState <span class="token keyword">as</span> <span class="token class-name">MyShipConnectorStatus<span class="token punctuation">?</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>status<span class="token punctuation">.</span>hasValue<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">switch</span><span class="token punctuation">(</span>newState<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">case</span> ConnectorStatus<span class="token punctuation">.</span>Connected<span class="token punctuation">:</span></span>
<span class="line">                <span class="token generic-method"><span class="token function">Emit</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ConnectorLockedEvent<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">case</span> ConnectorStatus<span class="token punctuation">.</span>Unconnected<span class="token punctuation">:</span></span>
<span class="line">                <span class="token generic-method"><span class="token function">Emit</span><span class="token generic class-name"><span class="token punctuation">&lt;</span>ConnectorUnlockedEvent<span class="token punctuation">&gt;</span></span></span><span class="token punctuation">(</span>connector<span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">default</span><span class="token punctuation">:</span></span>
<span class="line">                <span class="token keyword">break</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></div>`,5)),s("div",h,[n[56]||(n[56]=s("p",{class:"hint-container-title"},"Note",-1)),s("p",null,[n[54]||(n[54]=a("The Connector Module's ")),e(o,{to:"/IngameScript/Modules/Extension/ConnectorModule.html#hooks"},{default:t(()=>n[53]||(n[53]=[a("hooks")])),_:1,__:[53]}),n[55]||(n[55]=a(" are activated by the connector's state change using the method above."))])])])}const w=c(r,[["render",g],["__file","ExtensionModules.html.vue"]]),M=JSON.parse('{"path":"/Framework/Developer/ExtensionModules/ExtensionModules.html","title":"Extension Modules","lang":"en-US","frontmatter":{},"git":{"updatedTime":1750513470000,"contributors":[{"name":"Luke Morrison","username":"","email":"lukejamesmorrison@gmail.com","commits":7}],"changelog":[{"hash":"e104830f2f3dfd87542de822a20a5eac989955bc","time":1750513470000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"update ingame script codeblock"},{"hash":"15ee173564b47688d911d239bf1296182577deca","time":1744933175000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"Update docs"},{"hash":"db312309835110752ea2b209f7c3efbf6e7d9264","time":1744758309000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"dev initial commit"},{"hash":"f894df28734323dfee730c0dd29c28fed9ffa424","time":1744056546000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"v0.2.10 Update"},{"hash":"f073ff81c582f2a83e2362eb5edfb7885b8f37ea","time":1743428576000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"Update docs for 0.2.9"},{"hash":"02fd8ad6929ba3f2afb6d865b3cc1e7747ccd1fb","time":1743352100000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"0.2.9 Update"},{"hash":"7c2fb0716f1b3a7b9765a5e6872cb915206257b5","time":1742428082000,"email":"lukejamesmorrison@gmail.com","author":"Luke Morrison","message":"Initial commit"}]},"filePathRelative":"Framework/Developer/ExtensionModules/ExtensionModules.md"}');export{w as comp,M as data};
